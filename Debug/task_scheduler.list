
task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001180  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08001308  08001308  00002308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001368  08001368  00003060  2**0
                  CONTENTS
  4 .ARM          00000000  08001368  08001368  00003060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001368  08001368  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001368  08001368  00002368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800136c  0800136c  0000236c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08001370  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003060  2**0
                  CONTENTS
 10 .bss          000001c0  20000060  20000060  00003060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000220  20000220  00003060  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000e36  00000000  00000000  0000308a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005b1  00000000  00000000  00003ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000208  00000000  00000000  00004478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000016f  00000000  00000000  00004680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d97  00000000  00000000  000047ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001cf0  00000000  00000000  00007586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009e27  00000000  00000000  00009276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0001309d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d44  00000000  00000000  000130e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  00013e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000060 	.word	0x20000060
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080012f0 	.word	0x080012f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000064 	.word	0x20000064
 80001c4:	080012f0 	.word	0x080012f0

080001c8 <led_init_all>:
{
  for(uint32_t i = 0 ; i < count ; i++);
}

void led_init_all(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0

	uint32_t *pRccAhb1enr = (uint32_t*)0x40023830;
 80001ce:	4b19      	ldr	r3, [pc, #100]	@ (8000234 <led_init_all+0x6c>)
 80001d0:	607b      	str	r3, [r7, #4]
	uint32_t *pGpiodModeReg = (uint32_t*)0x40020C00;
 80001d2:	4b19      	ldr	r3, [pc, #100]	@ (8000238 <led_init_all+0x70>)
 80001d4:	603b      	str	r3, [r7, #0]


	*pRccAhb1enr |= ( 1 << 3);
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	f043 0208 	orr.w	r2, r3, #8
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	601a      	str	r2, [r3, #0]
	//configure LED_GREEN
	*pGpiodModeReg |= ( 1 << (2 * LED_GREEN));
 80001e2:	683b      	ldr	r3, [r7, #0]
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80001ea:	683b      	ldr	r3, [r7, #0]
 80001ec:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_ORANGE));
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_RED));
 80001fa:	683b      	ldr	r3, [r7, #0]
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_BLUE));
 8000206:	683b      	ldr	r3, [r7, #0]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	601a      	str	r2, [r3, #0]
	*pGpioOpTypeReg |= ( 1 << (2 * LED_ORANGE));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_BLUE));
#endif

    led_off(LED_GREEN);
 8000212:	200c      	movs	r0, #12
 8000214:	f000 f82a 	bl	800026c <led_off>
    led_off(LED_ORANGE);
 8000218:	200d      	movs	r0, #13
 800021a:	f000 f827 	bl	800026c <led_off>
    led_off(LED_RED);
 800021e:	200e      	movs	r0, #14
 8000220:	f000 f824 	bl	800026c <led_off>
    led_off(LED_BLUE);
 8000224:	200f      	movs	r0, #15
 8000226:	f000 f821 	bl	800026c <led_off>



}
 800022a:	bf00      	nop
 800022c:	3708      	adds	r7, #8
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	40023830 	.word	0x40023830
 8000238:	40020c00 	.word	0x40020c00

0800023c <led_on>:

void led_on(uint8_t led_no)
{
 800023c:	b480      	push	{r7}
 800023e:	b085      	sub	sp, #20
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	71fb      	strb	r3, [r7, #7]
  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 8000246:	4b08      	ldr	r3, [pc, #32]	@ (8000268 <led_on+0x2c>)
 8000248:	60fb      	str	r3, [r7, #12]
  *pGpiodDataReg |= ( 1 << led_no);
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	79fa      	ldrb	r2, [r7, #7]
 8000250:	2101      	movs	r1, #1
 8000252:	fa01 f202 	lsl.w	r2, r1, r2
 8000256:	431a      	orrs	r2, r3
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	601a      	str	r2, [r3, #0]

}
 800025c:	bf00      	nop
 800025e:	3714      	adds	r7, #20
 8000260:	46bd      	mov	sp, r7
 8000262:	bc80      	pop	{r7}
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	40020c14 	.word	0x40020c14

0800026c <led_off>:

void led_off(uint8_t led_no)
{
 800026c:	b480      	push	{r7}
 800026e:	b085      	sub	sp, #20
 8000270:	af00      	add	r7, sp, #0
 8000272:	4603      	mov	r3, r0
 8000274:	71fb      	strb	r3, [r7, #7]
	  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 8000276:	4b08      	ldr	r3, [pc, #32]	@ (8000298 <led_off+0x2c>)
 8000278:	60fb      	str	r3, [r7, #12]
	  *pGpiodDataReg &= ~( 1 << led_no);
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	79fa      	ldrb	r2, [r7, #7]
 8000280:	2101      	movs	r1, #1
 8000282:	fa01 f202 	lsl.w	r2, r1, r2
 8000286:	43d2      	mvns	r2, r2
 8000288:	401a      	ands	r2, r3
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	601a      	str	r2, [r3, #0]

}
 800028e:	bf00      	nop
 8000290:	3714      	adds	r7, #20
 8000292:	46bd      	mov	sp, r7
 8000294:	bc80      	pop	{r7}
 8000296:	4770      	bx	lr
 8000298:	40020c14 	.word	0x40020c14

0800029c <main>:

uint32_t g_tick_count = 0;
uint8_t current_task = 1;

int main(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	enable_processor_faults();
 80002a0:	f000 f8ac 	bl	80003fc <enable_processor_faults>
	init_scheduler_stack(SCHED_STACK_START);
 80002a4:	4808      	ldr	r0, [pc, #32]	@ (80002c8 <main+0x2c>)
 80002a6:	f000 f98d 	bl	80005c4 <init_scheduler_stack>

	init_tasks_stack();
 80002aa:	f000 f8c5 	bl	8000438 <init_tasks_stack>

	led_init_all();
 80002ae:	f7ff ff8b 	bl	80001c8 <led_init_all>

	init_systick_timer(1000);
 80002b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002b6:	f000 f94d 	bl	8000554 <init_systick_timer>

	switch_msp_to_psp();
 80002ba:	f000 f88f 	bl	80003dc <switch_msp_to_psp>

	task1_handler();
 80002be:	f000 f839 	bl	8000334 <task1_handler>


	for(;;);
 80002c2:	bf00      	nop
 80002c4:	e7fd      	b.n	80002c2 <main+0x26>
 80002c6:	bf00      	nop
 80002c8:	2001f000 	.word	0x2001f000

080002cc <task_delay>:
}

void task_delay(uint32_t tick_count){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]

	//disable interrupt becasue we are going to use a shared resource (user_tasks)

	INTERRUPT_DISABLE();
 80002d4:	f04f 0001 	mov.w	r0, #1
 80002d8:	f380 8810 	msr	PRIMASK, r0
	if(current_task){
 80002dc:	4b10      	ldr	r3, [pc, #64]	@ (8000320 <task_delay+0x54>)
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d013      	beq.n	800030c <task_delay+0x40>
		user_tasks[current_task].block_count = g_tick_count + tick_count;
 80002e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000324 <task_delay+0x58>)
 80002e6:	681a      	ldr	r2, [r3, #0]
 80002e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000320 <task_delay+0x54>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	4618      	mov	r0, r3
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	441a      	add	r2, r3
 80002f2:	490d      	ldr	r1, [pc, #52]	@ (8000328 <task_delay+0x5c>)
 80002f4:	0103      	lsls	r3, r0, #4
 80002f6:	440b      	add	r3, r1
 80002f8:	3304      	adds	r3, #4
 80002fa:	601a      	str	r2, [r3, #0]
		user_tasks[current_task].current_state = TASK_BLOCKED_STATE;
 80002fc:	4b08      	ldr	r3, [pc, #32]	@ (8000320 <task_delay+0x54>)
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	4a09      	ldr	r2, [pc, #36]	@ (8000328 <task_delay+0x5c>)
 8000302:	011b      	lsls	r3, r3, #4
 8000304:	4413      	add	r3, r2
 8000306:	3308      	adds	r3, #8
 8000308:	22ff      	movs	r2, #255	@ 0xff
 800030a:	701a      	strb	r2, [r3, #0]
	}
	schedule_next_task();
 800030c:	f000 f9b6 	bl	800067c <schedule_next_task>

	//enable interrupts
	INTERRUPT_ENABLE();
 8000310:	f04f 0000 	mov.w	r0, #0
 8000314:	f380 8810 	msr	PRIMASK, r0
}
 8000318:	bf00      	nop
 800031a:	3708      	adds	r7, #8
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	20000000 	.word	0x20000000
 8000324:	200000cc 	.word	0x200000cc
 8000328:	2000007c 	.word	0x2000007c

0800032c <idle_task>:

void idle_task(void){
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
	while(1);
 8000330:	bf00      	nop
 8000332:	e7fd      	b.n	8000330 <idle_task+0x4>

08000334 <task1_handler>:
}

void task1_handler(void){
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0

	while(1){
		led_on(LED_GREEN);
 8000338:	200c      	movs	r0, #12
 800033a:	f7ff ff7f 	bl	800023c <led_on>
		task_delay(1000);
 800033e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000342:	f7ff ffc3 	bl	80002cc <task_delay>
		led_off(LED_GREEN);
 8000346:	200c      	movs	r0, #12
 8000348:	f7ff ff90 	bl	800026c <led_off>
		task_delay(1000);
 800034c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000350:	f7ff ffbc 	bl	80002cc <task_delay>
		led_on(LED_GREEN);
 8000354:	bf00      	nop
 8000356:	e7ef      	b.n	8000338 <task1_handler+0x4>

08000358 <task2_handler>:
	}

}

void task2_handler(void){
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0

	while(1){
		led_on(LED_ORANGE);
 800035c:	200d      	movs	r0, #13
 800035e:	f7ff ff6d 	bl	800023c <led_on>
		task_delay(500);
 8000362:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000366:	f7ff ffb1 	bl	80002cc <task_delay>
		led_off(LED_ORANGE);
 800036a:	200d      	movs	r0, #13
 800036c:	f7ff ff7e 	bl	800026c <led_off>
		task_delay(500);
 8000370:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000374:	f7ff ffaa 	bl	80002cc <task_delay>
		led_on(LED_ORANGE);
 8000378:	bf00      	nop
 800037a:	e7ef      	b.n	800035c <task2_handler+0x4>

0800037c <task3_handler>:
	}

}

void task3_handler(void){
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0

	while(1){
		led_on(LED_BLUE);
 8000380:	200f      	movs	r0, #15
 8000382:	f7ff ff5b 	bl	800023c <led_on>
		task_delay(250);
 8000386:	20fa      	movs	r0, #250	@ 0xfa
 8000388:	f7ff ffa0 	bl	80002cc <task_delay>
		led_off(LED_BLUE);
 800038c:	200f      	movs	r0, #15
 800038e:	f7ff ff6d 	bl	800026c <led_off>
		task_delay(250);
 8000392:	20fa      	movs	r0, #250	@ 0xfa
 8000394:	f7ff ff9a 	bl	80002cc <task_delay>
		led_on(LED_BLUE);
 8000398:	bf00      	nop
 800039a:	e7f1      	b.n	8000380 <task3_handler+0x4>

0800039c <task4_handler>:
	}

}

void task4_handler(void){
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0

	while(1){
		led_on(LED_RED);
 80003a0:	200e      	movs	r0, #14
 80003a2:	f7ff ff4b 	bl	800023c <led_on>
		task_delay(125);
 80003a6:	207d      	movs	r0, #125	@ 0x7d
 80003a8:	f7ff ff90 	bl	80002cc <task_delay>
		led_off(LED_RED);
 80003ac:	200e      	movs	r0, #14
 80003ae:	f7ff ff5d 	bl	800026c <led_off>
		task_delay(125);
 80003b2:	207d      	movs	r0, #125	@ 0x7d
 80003b4:	f7ff ff8a 	bl	80002cc <task_delay>
		led_on(LED_RED);
 80003b8:	bf00      	nop
 80003ba:	e7f1      	b.n	80003a0 <task4_handler+0x4>

080003bc <get_psp_value>:
	}

}

/*Get PSP of currently running Task*/
uint32_t get_psp_value(void){
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0

	return user_tasks[current_task].psp_value;
 80003c0:	4b04      	ldr	r3, [pc, #16]	@ (80003d4 <get_psp_value+0x18>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	4a04      	ldr	r2, [pc, #16]	@ (80003d8 <get_psp_value+0x1c>)
 80003c6:	011b      	lsls	r3, r3, #4
 80003c8:	4413      	add	r3, r2
 80003ca:	681b      	ldr	r3, [r3, #0]
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bc80      	pop	{r7}
 80003d2:	4770      	bx	lr
 80003d4:	20000000 	.word	0x20000000
 80003d8:	2000007c 	.word	0x2000007c

080003dc <switch_msp_to_psp>:
__attribute ((naked)) void switch_msp_to_psp(void){

	//1. Initialize PSP with TASK1_STACK_START
	__asm volatile("PUSH {LR}");//need to do this to go back to main function after exiting this function.
 80003dc:	b500      	push	{lr}
								//The LR will get corrupted when get_psp_value is called in the next step. So we must preserve it
	__asm volatile("BL get_psp_value"); //after this executes, PSP value will be stored in R0
 80003de:	f7ff ffed 	bl	80003bc <get_psp_value>
	__asm volatile("MSR PSP, R0");
 80003e2:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 80003e6:	f85d eb04 	ldr.w	lr, [sp], #4
	//2. Switch SP from MSP to PSP
	__asm ("MRS R0, CONTROL");
 80003ea:	f3ef 8014 	mrs	r0, CONTROL
	__asm ("ORR R0, #2");
 80003ee:	f040 0002 	orr.w	r0, r0, #2
	__asm ("MSR CONTROL, R0");
 80003f2:	f380 8814 	msr	CONTROL, r0
	__asm volatile("BX LR");
 80003f6:	4770      	bx	lr


}
 80003f8:	bf00      	nop
	...

080003fc <enable_processor_faults>:

void enable_processor_faults(void){
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0

	volatile uint32_t *pSHCSR = (volatile uint32_t*)0xE000ED24;
 8000402:	4b0c      	ldr	r3, [pc, #48]	@ (8000434 <enable_processor_faults+0x38>)
 8000404:	607b      	str	r3, [r7, #4]
	*pSHCSR |= (1 << 18); //enable Usage Fault
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 17); //enable Bus Fault
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 16); //enable MemManage Fault
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	601a      	str	r2, [r3, #0]

}
 800042a:	bf00      	nop
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr
 8000434:	e000ed24 	.word	0xe000ed24

08000438 <init_tasks_stack>:
void init_tasks_stack(){
 8000438:	b480      	push	{r7}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0

	user_tasks[0].current_state = TASK_READY_STATE; //idle task must be blocked. it should run only when all the other tasks are blocked
 800043e:	4b3a      	ldr	r3, [pc, #232]	@ (8000528 <init_tasks_stack+0xf0>)
 8000440:	2200      	movs	r2, #0
 8000442:	721a      	strb	r2, [r3, #8]
	user_tasks[1].current_state = TASK_READY_STATE;
 8000444:	4b38      	ldr	r3, [pc, #224]	@ (8000528 <init_tasks_stack+0xf0>)
 8000446:	2200      	movs	r2, #0
 8000448:	761a      	strb	r2, [r3, #24]
	user_tasks[2].current_state = TASK_READY_STATE;
 800044a:	4b37      	ldr	r3, [pc, #220]	@ (8000528 <init_tasks_stack+0xf0>)
 800044c:	2200      	movs	r2, #0
 800044e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	user_tasks[3].current_state = TASK_READY_STATE;
 8000452:	4b35      	ldr	r3, [pc, #212]	@ (8000528 <init_tasks_stack+0xf0>)
 8000454:	2200      	movs	r2, #0
 8000456:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	user_tasks[4].current_state = TASK_READY_STATE;
 800045a:	4b33      	ldr	r3, [pc, #204]	@ (8000528 <init_tasks_stack+0xf0>)
 800045c:	2200      	movs	r2, #0
 800045e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

	user_tasks[0].psp_value = IDLE_TASK_STACK_START;
 8000462:	4b31      	ldr	r3, [pc, #196]	@ (8000528 <init_tasks_stack+0xf0>)
 8000464:	4a31      	ldr	r2, [pc, #196]	@ (800052c <init_tasks_stack+0xf4>)
 8000466:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = T1_STACK_START;
 8000468:	4b2f      	ldr	r3, [pc, #188]	@ (8000528 <init_tasks_stack+0xf0>)
 800046a:	4a31      	ldr	r2, [pc, #196]	@ (8000530 <init_tasks_stack+0xf8>)
 800046c:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = T2_STACK_START;
 800046e:	4b2e      	ldr	r3, [pc, #184]	@ (8000528 <init_tasks_stack+0xf0>)
 8000470:	4a30      	ldr	r2, [pc, #192]	@ (8000534 <init_tasks_stack+0xfc>)
 8000472:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = T3_STACK_START;
 8000474:	4b2c      	ldr	r3, [pc, #176]	@ (8000528 <init_tasks_stack+0xf0>)
 8000476:	4a30      	ldr	r2, [pc, #192]	@ (8000538 <init_tasks_stack+0x100>)
 8000478:	631a      	str	r2, [r3, #48]	@ 0x30
	user_tasks[4].psp_value = T4_STACK_START;
 800047a:	4b2b      	ldr	r3, [pc, #172]	@ (8000528 <init_tasks_stack+0xf0>)
 800047c:	4a2f      	ldr	r2, [pc, #188]	@ (800053c <init_tasks_stack+0x104>)
 800047e:	641a      	str	r2, [r3, #64]	@ 0x40

	user_tasks[0].task_handler = idle_task;
 8000480:	4b29      	ldr	r3, [pc, #164]	@ (8000528 <init_tasks_stack+0xf0>)
 8000482:	4a2f      	ldr	r2, [pc, #188]	@ (8000540 <init_tasks_stack+0x108>)
 8000484:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task1_handler;
 8000486:	4b28      	ldr	r3, [pc, #160]	@ (8000528 <init_tasks_stack+0xf0>)
 8000488:	4a2e      	ldr	r2, [pc, #184]	@ (8000544 <init_tasks_stack+0x10c>)
 800048a:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task2_handler;
 800048c:	4b26      	ldr	r3, [pc, #152]	@ (8000528 <init_tasks_stack+0xf0>)
 800048e:	4a2e      	ldr	r2, [pc, #184]	@ (8000548 <init_tasks_stack+0x110>)
 8000490:	62da      	str	r2, [r3, #44]	@ 0x2c
	user_tasks[3].task_handler = task3_handler;
 8000492:	4b25      	ldr	r3, [pc, #148]	@ (8000528 <init_tasks_stack+0xf0>)
 8000494:	4a2d      	ldr	r2, [pc, #180]	@ (800054c <init_tasks_stack+0x114>)
 8000496:	63da      	str	r2, [r3, #60]	@ 0x3c
	user_tasks[4].task_handler = task4_handler;
 8000498:	4b23      	ldr	r3, [pc, #140]	@ (8000528 <init_tasks_stack+0xf0>)
 800049a:	4a2d      	ldr	r2, [pc, #180]	@ (8000550 <init_tasks_stack+0x118>)
 800049c:	64da      	str	r2, [r3, #76]	@ 0x4c

	uint32_t *pPSP;
	for(uint32_t i = 0; i < MAX_TASKS; i++){
 800049e:	2300      	movs	r3, #0
 80004a0:	60bb      	str	r3, [r7, #8]
 80004a2:	e037      	b.n	8000514 <init_tasks_stack+0xdc>
		pPSP = (uint32_t*)user_tasks[i].psp_value;
 80004a4:	4a20      	ldr	r2, [pc, #128]	@ (8000528 <init_tasks_stack+0xf0>)
 80004a6:	68bb      	ldr	r3, [r7, #8]
 80004a8:	011b      	lsls	r3, r3, #4
 80004aa:	4413      	add	r3, r2
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	60fb      	str	r3, [r7, #12]

		pPSP--;
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	3b04      	subs	r3, #4
 80004b4:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR;
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80004bc:	601a      	str	r2, [r3, #0]

		pPSP--;
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	3b04      	subs	r3, #4
 80004c2:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t)user_tasks[i].task_handler; //this should hold the address of task handler (because this is where the task will resume)
 80004c4:	4a18      	ldr	r2, [pc, #96]	@ (8000528 <init_tasks_stack+0xf0>)
 80004c6:	68bb      	ldr	r3, [r7, #8]
 80004c8:	011b      	lsls	r3, r3, #4
 80004ca:	4413      	add	r3, r2
 80004cc:	330c      	adds	r3, #12
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	461a      	mov	r2, r3
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	601a      	str	r2, [r3, #0]

		pPSP--;
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	3b04      	subs	r3, #4
 80004da:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD; //referred ARm Cortex Generic User Guide to see all the possible values of LR
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	f06f 0202 	mvn.w	r2, #2
 80004e2:	601a      	str	r2, [r3, #0]

		for(int j = 0; j < 13; j++){
 80004e4:	2300      	movs	r3, #0
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	e008      	b.n	80004fc <init_tasks_stack+0xc4>
			pPSP--;
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	3b04      	subs	r3, #4
 80004ee:	60fb      	str	r3, [r7, #12]
			*pPSP = 0; //R12
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < 13; j++){
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	3301      	adds	r3, #1
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2b0c      	cmp	r3, #12
 8000500:	ddf3      	ble.n	80004ea <init_tasks_stack+0xb2>
		}

		user_tasks[i].psp_value = (uint32_t)pPSP;
 8000502:	68fa      	ldr	r2, [r7, #12]
 8000504:	4908      	ldr	r1, [pc, #32]	@ (8000528 <init_tasks_stack+0xf0>)
 8000506:	68bb      	ldr	r3, [r7, #8]
 8000508:	011b      	lsls	r3, r3, #4
 800050a:	440b      	add	r3, r1
 800050c:	601a      	str	r2, [r3, #0]
	for(uint32_t i = 0; i < MAX_TASKS; i++){
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	3301      	adds	r3, #1
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	2b04      	cmp	r3, #4
 8000518:	d9c4      	bls.n	80004a4 <init_tasks_stack+0x6c>

	}
}
 800051a:	bf00      	nop
 800051c:	bf00      	nop
 800051e:	3714      	adds	r7, #20
 8000520:	46bd      	mov	sp, r7
 8000522:	bc80      	pop	{r7}
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	2000007c 	.word	0x2000007c
 800052c:	2001ec00 	.word	0x2001ec00
 8000530:	20020000 	.word	0x20020000
 8000534:	2001fc00 	.word	0x2001fc00
 8000538:	2001f800 	.word	0x2001f800
 800053c:	2001f400 	.word	0x2001f400
 8000540:	0800032d 	.word	0x0800032d
 8000544:	08000335 	.word	0x08000335
 8000548:	08000359 	.word	0x08000359
 800054c:	0800037d 	.word	0x0800037d
 8000550:	0800039d 	.word	0x0800039d

08000554 <init_systick_timer>:

void init_systick_timer(uint32_t tick_hz){
 8000554:	b480      	push	{r7}
 8000556:	b087      	sub	sp, #28
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	uint32_t *pSCSR	= (uint32_t*)0xE000E010;
 800055c:	4b16      	ldr	r3, [pc, #88]	@ (80005b8 <init_systick_timer+0x64>)
 800055e:	617b      	str	r3, [r7, #20]
	uint32_t *pSRVR  = (uint32_t*)0xE000E014;
 8000560:	4b16      	ldr	r3, [pc, #88]	@ (80005bc <init_systick_timer+0x68>)
 8000562:	613b      	str	r3, [r7, #16]
	uint32_t count_value = ((SYSTICK_TIM_CLK)/tick_hz) - 1;
 8000564:	4a16      	ldr	r2, [pc, #88]	@ (80005c0 <init_systick_timer+0x6c>)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	fbb2 f3f3 	udiv	r3, r2, r3
 800056c:	3b01      	subs	r3, #1
 800056e:	60fb      	str	r3, [r7, #12]

	/*Load Systick Reload Value Register with Reload Value corresponding to 1ms interrupt*/
	*pSRVR &= ~(0xFFFFFF);
 8000570:	693b      	ldr	r3, [r7, #16]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 8000578:	693b      	ldr	r3, [r7, #16]
 800057a:	601a      	str	r2, [r3, #0]
	*pSRVR |= count_value;
 800057c:	693b      	ldr	r3, [r7, #16]
 800057e:	681a      	ldr	r2, [r3, #0]
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	431a      	orrs	r2, r3
 8000584:	693b      	ldr	r3, [r7, #16]
 8000586:	601a      	str	r2, [r3, #0]

	/*Configure Systick Control and Status Register*/
	*pSCSR |= (1 << 2); //enable processor clock to systick peripheral
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f043 0204 	orr.w	r2, r3, #4
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 1); //enable systick interrupt
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f043 0202 	orr.w	r2, r3, #2
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 0); //enable systick peripheral
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f043 0201 	orr.w	r2, r3, #1
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	601a      	str	r2, [r3, #0]
}
 80005ac:	bf00      	nop
 80005ae:	371c      	adds	r7, #28
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bc80      	pop	{r7}
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	e000e010 	.word	0xe000e010
 80005bc:	e000e014 	.word	0xe000e014
 80005c0:	00f42400 	.word	0x00f42400

080005c4 <init_scheduler_stack>:

/*Initializes the MSP with the Top of Scheduler Stack*/
__attribute ((naked))void init_scheduler_stack(uint32_t sched_stack_top){

	__asm ("MSR MSP, R0");
 80005c4:	f380 8808 	msr	MSP, r0
	__asm ("BX LR");
 80005c8:	4770      	bx	lr

}
 80005ca:	bf00      	nop

080005cc <save_psp_value>:

void save_psp_value(uint32_t current_psp_value){
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value = current_psp_value;
 80005d4:	4b05      	ldr	r3, [pc, #20]	@ (80005ec <save_psp_value+0x20>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	4a05      	ldr	r2, [pc, #20]	@ (80005f0 <save_psp_value+0x24>)
 80005da:	011b      	lsls	r3, r3, #4
 80005dc:	4413      	add	r3, r2
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	601a      	str	r2, [r3, #0]
}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr
 80005ec:	20000000 	.word	0x20000000
 80005f0:	2000007c 	.word	0x2000007c

080005f4 <update_next_task>:

void update_next_task(){
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0

	uint32_t state = TASK_BLOCKED_STATE;
 80005fa:	23ff      	movs	r3, #255	@ 0xff
 80005fc:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < MAX_TASKS; i++){
 80005fe:	2300      	movs	r3, #0
 8000600:	603b      	str	r3, [r7, #0]
 8000602:	e024      	b.n	800064e <update_next_task+0x5a>
		current_task++;
 8000604:	4b1a      	ldr	r3, [pc, #104]	@ (8000670 <update_next_task+0x7c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	3301      	adds	r3, #1
 800060a:	b2da      	uxtb	r2, r3
 800060c:	4b18      	ldr	r3, [pc, #96]	@ (8000670 <update_next_task+0x7c>)
 800060e:	701a      	strb	r2, [r3, #0]
		current_task %= MAX_TASKS;
 8000610:	4b17      	ldr	r3, [pc, #92]	@ (8000670 <update_next_task+0x7c>)
 8000612:	781a      	ldrb	r2, [r3, #0]
 8000614:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <update_next_task+0x80>)
 8000616:	fba3 1302 	umull	r1, r3, r3, r2
 800061a:	0899      	lsrs	r1, r3, #2
 800061c:	460b      	mov	r3, r1
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	440b      	add	r3, r1
 8000622:	1ad3      	subs	r3, r2, r3
 8000624:	b2da      	uxtb	r2, r3
 8000626:	4b12      	ldr	r3, [pc, #72]	@ (8000670 <update_next_task+0x7c>)
 8000628:	701a      	strb	r2, [r3, #0]

		state = user_tasks[current_task].current_state;
 800062a:	4b11      	ldr	r3, [pc, #68]	@ (8000670 <update_next_task+0x7c>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	4a12      	ldr	r2, [pc, #72]	@ (8000678 <update_next_task+0x84>)
 8000630:	011b      	lsls	r3, r3, #4
 8000632:	4413      	add	r3, r2
 8000634:	3308      	adds	r3, #8
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	607b      	str	r3, [r7, #4]
		if( (state == TASK_READY_STATE) && (current_task != 0)){
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d103      	bne.n	8000648 <update_next_task+0x54>
 8000640:	4b0b      	ldr	r3, [pc, #44]	@ (8000670 <update_next_task+0x7c>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d106      	bne.n	8000656 <update_next_task+0x62>
	for(int i = 0; i < MAX_TASKS; i++){
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	3301      	adds	r3, #1
 800064c:	603b      	str	r3, [r7, #0]
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	2b04      	cmp	r3, #4
 8000652:	ddd7      	ble.n	8000604 <update_next_task+0x10>
 8000654:	e000      	b.n	8000658 <update_next_task+0x64>
			break;
 8000656:	bf00      	nop
		}
	}

	if(state != TASK_READY_STATE){ //if all the user tasks are in blocked state, next task must be idle_task
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d002      	beq.n	8000664 <update_next_task+0x70>
		current_task = 0;
 800065e:	4b04      	ldr	r3, [pc, #16]	@ (8000670 <update_next_task+0x7c>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
	}


}
 8000664:	bf00      	nop
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000000 	.word	0x20000000
 8000674:	cccccccd 	.word	0xcccccccd
 8000678:	2000007c 	.word	0x2000007c

0800067c <schedule_next_task>:

void schedule_next_task(){
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
	volatile uint32_t *pICSR = (volatile uint32_t*)0xE000ED04;
 8000682:	4b06      	ldr	r3, [pc, #24]	@ (800069c <schedule_next_task+0x20>)
 8000684:	607b      	str	r3, [r7, #4]
	*pICSR |= (1 << 28);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	601a      	str	r2, [r3, #0]
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr
 800069c:	e000ed04 	.word	0xe000ed04

080006a0 <update_global_tick_count>:

void update_global_tick_count(){
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
	g_tick_count++;
 80006a4:	4b04      	ldr	r3, [pc, #16]	@ (80006b8 <update_global_tick_count+0x18>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	3301      	adds	r3, #1
 80006aa:	4a03      	ldr	r2, [pc, #12]	@ (80006b8 <update_global_tick_count+0x18>)
 80006ac:	6013      	str	r3, [r2, #0]
}
 80006ae:	bf00      	nop
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bc80      	pop	{r7}
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	200000cc 	.word	0x200000cc

080006bc <unblock_tasks>:

void unblock_tasks(){
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
	//only do this if the current task is user task (not idle task)
	//that is why i =1 and not i = 0
	for(int i = 1; i < MAX_TASKS; i++){
 80006c2:	2301      	movs	r3, #1
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	e01b      	b.n	8000700 <unblock_tasks+0x44>

		if(user_tasks[i].current_state != TASK_READY_STATE){
 80006c8:	4a12      	ldr	r2, [pc, #72]	@ (8000714 <unblock_tasks+0x58>)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	011b      	lsls	r3, r3, #4
 80006ce:	4413      	add	r3, r2
 80006d0:	3308      	adds	r3, #8
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d010      	beq.n	80006fa <unblock_tasks+0x3e>
					if(user_tasks[i].block_count == g_tick_count){
 80006d8:	4a0e      	ldr	r2, [pc, #56]	@ (8000714 <unblock_tasks+0x58>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	011b      	lsls	r3, r3, #4
 80006de:	4413      	add	r3, r2
 80006e0:	3304      	adds	r3, #4
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <unblock_tasks+0x5c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d106      	bne.n	80006fa <unblock_tasks+0x3e>
					user_tasks[i].current_state = TASK_READY_STATE;
 80006ec:	4a09      	ldr	r2, [pc, #36]	@ (8000714 <unblock_tasks+0x58>)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	011b      	lsls	r3, r3, #4
 80006f2:	4413      	add	r3, r2
 80006f4:	3308      	adds	r3, #8
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i < MAX_TASKS; i++){
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	3301      	adds	r3, #1
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2b04      	cmp	r3, #4
 8000704:	dde0      	ble.n	80006c8 <unblock_tasks+0xc>
			}
		}
	}
}
 8000706:	bf00      	nop
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	2000007c 	.word	0x2000007c
 8000718:	200000cc 	.word	0x200000cc

0800071c <PendSV_Handler>:
__attribute ((naked)) void PendSV_Handler(void){

	//1. Get the current Task's PSP
	__asm volatile("MRS R0, PSP");
 800071c:	f3ef 8009 	mrs	r0, PSP

	//2. PUSH the context of currently running Task (R4 to R11)
	__asm volatile("STMDB R0!, {R4-R11}");
 8000720:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//3. Save the current value of PSP (value of PSP after saving R4 to R11)
	__asm volatile("PUSH {LR}");
 8000724:	b500      	push	{lr}
	__asm volatile("BL save_psp_value");
 8000726:	f7ff ff51 	bl	80005cc <save_psp_value>


	//3. Switch PSP to Context of new Task
	__asm volatile("BL update_next_task");
 800072a:	f7ff ff63 	bl	80005f4 <update_next_task>
	__asm volatile("BL get_psp_value");
 800072e:	f7ff fe45 	bl	80003bc <get_psp_value>

	//4. POP the manually saved context
	__asm volatile("LDMIA R0!, {R4-R11}"); //by defaultl, LDM is LDMIA
 8000732:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm volatile("MSR PSP, R0"); //update PSP to new PSP Value
 8000736:	f380 8809 	msr	PSP, r0

	__asm volatile("POP {LR}");
 800073a:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile("BX LR");
 800073e:	4770      	bx	lr

}
 8000740:	bf00      	nop
	...

08000744 <SysTick_Handler>:
void SysTick_Handler(void){
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0

		update_global_tick_count();
 800074a:	f7ff ffa9 	bl	80006a0 <update_global_tick_count>
		unblock_tasks();
 800074e:	f7ff ffb5 	bl	80006bc <unblock_tasks>

		volatile uint32_t *pICSR = (volatile uint32_t*)0xE000ED04;
 8000752:	4b06      	ldr	r3, [pc, #24]	@ (800076c <SysTick_Handler+0x28>)
 8000754:	607b      	str	r3, [r7, #4]
		*pICSR |= (1 << 28); //set PendSV. Once this is done, execution will jump to PendSVHandler as soon as it exits SystickHandler
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	601a      	str	r2, [r3, #0]

}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	e000ed04 	.word	0xe000ed04

08000770 <MemManage_Handler>:

void MemManage_Handler(){
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0

 	printf("MemManage_Handler hit\n");
 8000774:	4802      	ldr	r0, [pc, #8]	@ (8000780 <MemManage_Handler+0x10>)
 8000776:	f000 fa2b 	bl	8000bd0 <puts>
	while(1);
 800077a:	bf00      	nop
 800077c:	e7fd      	b.n	800077a <MemManage_Handler+0xa>
 800077e:	bf00      	nop
 8000780:	08001308 	.word	0x08001308

08000784 <BusFault_Handler>:

}
void BusFault_Handler(){
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0

	printf("BusFault_Handler hit\n");
 8000788:	4802      	ldr	r0, [pc, #8]	@ (8000794 <BusFault_Handler+0x10>)
 800078a:	f000 fa21 	bl	8000bd0 <puts>
	while(1);
 800078e:	bf00      	nop
 8000790:	e7fd      	b.n	800078e <BusFault_Handler+0xa>
 8000792:	bf00      	nop
 8000794:	08001320 	.word	0x08001320

08000798 <UsageFault_Handler>:

}
void UsageFault_Handler(){
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0


	printf("UsageFault_Handler hit\n");
 800079c:	4802      	ldr	r0, [pc, #8]	@ (80007a8 <UsageFault_Handler+0x10>)
 800079e:	f000 fa17 	bl	8000bd0 <puts>
	while(1);
 80007a2:	bf00      	nop
 80007a4:	e7fd      	b.n	80007a2 <UsageFault_Handler+0xa>
 80007a6:	bf00      	nop
 80007a8:	08001338 	.word	0x08001338

080007ac <HardFault_Handler>:

}

void HardFault_Handler(){
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0

	printf("HardFault_Handler hit\n");
 80007b0:	4802      	ldr	r0, [pc, #8]	@ (80007bc <HardFault_Handler+0x10>)
 80007b2:	f000 fa0d 	bl	8000bd0 <puts>
	while(1);
 80007b6:	bf00      	nop
 80007b8:	e7fd      	b.n	80007b6 <HardFault_Handler+0xa>
 80007ba:	bf00      	nop
 80007bc:	08001350 	.word	0x08001350

080007c0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <ITM_SendChar+0x44>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a0d      	ldr	r2, [pc, #52]	@ (8000804 <ITM_SendChar+0x44>)
 80007d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80007d4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80007d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <ITM_SendChar+0x48>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a0b      	ldr	r2, [pc, #44]	@ (8000808 <ITM_SendChar+0x48>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80007e2:	bf00      	nop
 80007e4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d0f8      	beq.n	80007e4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80007f2:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	6013      	str	r3, [r2, #0]
}
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr
 8000804:	e000edfc 	.word	0xe000edfc
 8000808:	e0000e00 	.word	0xe0000e00

0800080c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
 800081c:	e00a      	b.n	8000834 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800081e:	f3af 8000 	nop.w
 8000822:	4601      	mov	r1, r0
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	1c5a      	adds	r2, r3, #1
 8000828:	60ba      	str	r2, [r7, #8]
 800082a:	b2ca      	uxtb	r2, r1
 800082c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	3301      	adds	r3, #1
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	697a      	ldr	r2, [r7, #20]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	429a      	cmp	r2, r3
 800083a:	dbf0      	blt.n	800081e <_read+0x12>
	}

return len;
 800083c:	687b      	ldr	r3, [r7, #4]
}
 800083e:	4618      	mov	r0, r3
 8000840:	3718      	adds	r7, #24
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b086      	sub	sp, #24
 800084a:	af00      	add	r7, sp, #0
 800084c:	60f8      	str	r0, [r7, #12]
 800084e:	60b9      	str	r1, [r7, #8]
 8000850:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
 8000856:	e009      	b.n	800086c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	1c5a      	adds	r2, r3, #1
 800085c:	60ba      	str	r2, [r7, #8]
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff ffad 	bl	80007c0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	3301      	adds	r3, #1
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	697a      	ldr	r2, [r7, #20]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	429a      	cmp	r2, r3
 8000872:	dbf1      	blt.n	8000858 <_write+0x12>
	}
	return len;
 8000874:	687b      	ldr	r3, [r7, #4]
}
 8000876:	4618      	mov	r0, r3
 8000878:	3718      	adds	r7, #24
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <_close>:

int _close(int file)
{
 800087e:	b480      	push	{r7}
 8000880:	b083      	sub	sp, #12
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
	return -1;
 8000886:	f04f 33ff 	mov.w	r3, #4294967295
}
 800088a:	4618      	mov	r0, r3
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr

08000894 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008a4:	605a      	str	r2, [r3, #4]
	return 0;
 80008a6:	2300      	movs	r3, #0
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr

080008b2 <_isatty>:

int _isatty(int file)
{
 80008b2:	b480      	push	{r7}
 80008b4:	b083      	sub	sp, #12
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
	return 1;
 80008ba:	2301      	movs	r3, #1
}
 80008bc:	4618      	mov	r0, r3
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr

080008c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008c6:	b480      	push	{r7}
 80008c8:	b085      	sub	sp, #20
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	60f8      	str	r0, [r7, #12]
 80008ce:	60b9      	str	r1, [r7, #8]
 80008d0:	607a      	str	r2, [r7, #4]
	return 0;
 80008d2:	2300      	movs	r3, #0
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr
	...

080008e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008e8:	4a14      	ldr	r2, [pc, #80]	@ (800093c <_sbrk+0x5c>)
 80008ea:	4b15      	ldr	r3, [pc, #84]	@ (8000940 <_sbrk+0x60>)
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008f4:	4b13      	ldr	r3, [pc, #76]	@ (8000944 <_sbrk+0x64>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d102      	bne.n	8000902 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008fc:	4b11      	ldr	r3, [pc, #68]	@ (8000944 <_sbrk+0x64>)
 80008fe:	4a12      	ldr	r2, [pc, #72]	@ (8000948 <_sbrk+0x68>)
 8000900:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000902:	4b10      	ldr	r3, [pc, #64]	@ (8000944 <_sbrk+0x64>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4413      	add	r3, r2
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	429a      	cmp	r2, r3
 800090e:	d207      	bcs.n	8000920 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000910:	f000 fa8c 	bl	8000e2c <__errno>
 8000914:	4603      	mov	r3, r0
 8000916:	220c      	movs	r2, #12
 8000918:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800091a:	f04f 33ff 	mov.w	r3, #4294967295
 800091e:	e009      	b.n	8000934 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000920:	4b08      	ldr	r3, [pc, #32]	@ (8000944 <_sbrk+0x64>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000926:	4b07      	ldr	r3, [pc, #28]	@ (8000944 <_sbrk+0x64>)
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4413      	add	r3, r2
 800092e:	4a05      	ldr	r2, [pc, #20]	@ (8000944 <_sbrk+0x64>)
 8000930:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000932:	68fb      	ldr	r3, [r7, #12]
}
 8000934:	4618      	mov	r0, r3
 8000936:	3718      	adds	r7, #24
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20020000 	.word	0x20020000
 8000940:	00000400 	.word	0x00000400
 8000944:	200000d0 	.word	0x200000d0
 8000948:	20000220 	.word	0x20000220

0800094c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800094c:	480d      	ldr	r0, [pc, #52]	@ (8000984 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800094e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000950:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000954:	480c      	ldr	r0, [pc, #48]	@ (8000988 <LoopForever+0x6>)
  ldr r1, =_edata
 8000956:	490d      	ldr	r1, [pc, #52]	@ (800098c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000958:	4a0d      	ldr	r2, [pc, #52]	@ (8000990 <LoopForever+0xe>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800095c:	e002      	b.n	8000964 <LoopCopyDataInit>

0800095e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000962:	3304      	adds	r3, #4

08000964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000968:	d3f9      	bcc.n	800095e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096a:	4a0a      	ldr	r2, [pc, #40]	@ (8000994 <LoopForever+0x12>)
  ldr r4, =_ebss
 800096c:	4c0a      	ldr	r4, [pc, #40]	@ (8000998 <LoopForever+0x16>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000970:	e001      	b.n	8000976 <LoopFillZerobss>

08000972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000974:	3204      	adds	r2, #4

08000976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000978:	d3fb      	bcc.n	8000972 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800097a:	f000 fa5d 	bl	8000e38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800097e:	f7ff fc8d 	bl	800029c <main>

08000982 <LoopForever>:

LoopForever:
  b LoopForever
 8000982:	e7fe      	b.n	8000982 <LoopForever>
  ldr   r0, =_estack
 8000984:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800098c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000990:	08001370 	.word	0x08001370
  ldr r2, =_sbss
 8000994:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000998:	20000220 	.word	0x20000220

0800099c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800099c:	e7fe      	b.n	800099c <ADC_IRQHandler>
	...

080009a0 <std>:
 80009a0:	2300      	movs	r3, #0
 80009a2:	b510      	push	{r4, lr}
 80009a4:	4604      	mov	r4, r0
 80009a6:	e9c0 3300 	strd	r3, r3, [r0]
 80009aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80009ae:	6083      	str	r3, [r0, #8]
 80009b0:	8181      	strh	r1, [r0, #12]
 80009b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80009b4:	81c2      	strh	r2, [r0, #14]
 80009b6:	6183      	str	r3, [r0, #24]
 80009b8:	4619      	mov	r1, r3
 80009ba:	2208      	movs	r2, #8
 80009bc:	305c      	adds	r0, #92	@ 0x5c
 80009be:	f000 f9e7 	bl	8000d90 <memset>
 80009c2:	4b0d      	ldr	r3, [pc, #52]	@ (80009f8 <std+0x58>)
 80009c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80009c6:	4b0d      	ldr	r3, [pc, #52]	@ (80009fc <std+0x5c>)
 80009c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80009ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000a00 <std+0x60>)
 80009cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80009ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000a04 <std+0x64>)
 80009d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80009d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a08 <std+0x68>)
 80009d4:	6224      	str	r4, [r4, #32]
 80009d6:	429c      	cmp	r4, r3
 80009d8:	d006      	beq.n	80009e8 <std+0x48>
 80009da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80009de:	4294      	cmp	r4, r2
 80009e0:	d002      	beq.n	80009e8 <std+0x48>
 80009e2:	33d0      	adds	r3, #208	@ 0xd0
 80009e4:	429c      	cmp	r4, r3
 80009e6:	d105      	bne.n	80009f4 <std+0x54>
 80009e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80009ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009f0:	f000 ba46 	b.w	8000e80 <__retarget_lock_init_recursive>
 80009f4:	bd10      	pop	{r4, pc}
 80009f6:	bf00      	nop
 80009f8:	08000be1 	.word	0x08000be1
 80009fc:	08000c03 	.word	0x08000c03
 8000a00:	08000c3b 	.word	0x08000c3b
 8000a04:	08000c5f 	.word	0x08000c5f
 8000a08:	200000d4 	.word	0x200000d4

08000a0c <stdio_exit_handler>:
 8000a0c:	4a02      	ldr	r2, [pc, #8]	@ (8000a18 <stdio_exit_handler+0xc>)
 8000a0e:	4903      	ldr	r1, [pc, #12]	@ (8000a1c <stdio_exit_handler+0x10>)
 8000a10:	4803      	ldr	r0, [pc, #12]	@ (8000a20 <stdio_exit_handler+0x14>)
 8000a12:	f000 b869 	b.w	8000ae8 <_fwalk_sglue>
 8000a16:	bf00      	nop
 8000a18:	20000004 	.word	0x20000004
 8000a1c:	08001179 	.word	0x08001179
 8000a20:	20000014 	.word	0x20000014

08000a24 <cleanup_stdio>:
 8000a24:	6841      	ldr	r1, [r0, #4]
 8000a26:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <cleanup_stdio+0x34>)
 8000a28:	4299      	cmp	r1, r3
 8000a2a:	b510      	push	{r4, lr}
 8000a2c:	4604      	mov	r4, r0
 8000a2e:	d001      	beq.n	8000a34 <cleanup_stdio+0x10>
 8000a30:	f000 fba2 	bl	8001178 <_fflush_r>
 8000a34:	68a1      	ldr	r1, [r4, #8]
 8000a36:	4b09      	ldr	r3, [pc, #36]	@ (8000a5c <cleanup_stdio+0x38>)
 8000a38:	4299      	cmp	r1, r3
 8000a3a:	d002      	beq.n	8000a42 <cleanup_stdio+0x1e>
 8000a3c:	4620      	mov	r0, r4
 8000a3e:	f000 fb9b 	bl	8001178 <_fflush_r>
 8000a42:	68e1      	ldr	r1, [r4, #12]
 8000a44:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <cleanup_stdio+0x3c>)
 8000a46:	4299      	cmp	r1, r3
 8000a48:	d004      	beq.n	8000a54 <cleanup_stdio+0x30>
 8000a4a:	4620      	mov	r0, r4
 8000a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a50:	f000 bb92 	b.w	8001178 <_fflush_r>
 8000a54:	bd10      	pop	{r4, pc}
 8000a56:	bf00      	nop
 8000a58:	200000d4 	.word	0x200000d4
 8000a5c:	2000013c 	.word	0x2000013c
 8000a60:	200001a4 	.word	0x200001a4

08000a64 <global_stdio_init.part.0>:
 8000a64:	b510      	push	{r4, lr}
 8000a66:	4b0b      	ldr	r3, [pc, #44]	@ (8000a94 <global_stdio_init.part.0+0x30>)
 8000a68:	4c0b      	ldr	r4, [pc, #44]	@ (8000a98 <global_stdio_init.part.0+0x34>)
 8000a6a:	4a0c      	ldr	r2, [pc, #48]	@ (8000a9c <global_stdio_init.part.0+0x38>)
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	4620      	mov	r0, r4
 8000a70:	2200      	movs	r2, #0
 8000a72:	2104      	movs	r1, #4
 8000a74:	f7ff ff94 	bl	80009a0 <std>
 8000a78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	2109      	movs	r1, #9
 8000a80:	f7ff ff8e 	bl	80009a0 <std>
 8000a84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000a88:	2202      	movs	r2, #2
 8000a8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a8e:	2112      	movs	r1, #18
 8000a90:	f7ff bf86 	b.w	80009a0 <std>
 8000a94:	2000020c 	.word	0x2000020c
 8000a98:	200000d4 	.word	0x200000d4
 8000a9c:	08000a0d 	.word	0x08000a0d

08000aa0 <__sfp_lock_acquire>:
 8000aa0:	4801      	ldr	r0, [pc, #4]	@ (8000aa8 <__sfp_lock_acquire+0x8>)
 8000aa2:	f000 b9ee 	b.w	8000e82 <__retarget_lock_acquire_recursive>
 8000aa6:	bf00      	nop
 8000aa8:	20000215 	.word	0x20000215

08000aac <__sfp_lock_release>:
 8000aac:	4801      	ldr	r0, [pc, #4]	@ (8000ab4 <__sfp_lock_release+0x8>)
 8000aae:	f000 b9e9 	b.w	8000e84 <__retarget_lock_release_recursive>
 8000ab2:	bf00      	nop
 8000ab4:	20000215 	.word	0x20000215

08000ab8 <__sinit>:
 8000ab8:	b510      	push	{r4, lr}
 8000aba:	4604      	mov	r4, r0
 8000abc:	f7ff fff0 	bl	8000aa0 <__sfp_lock_acquire>
 8000ac0:	6a23      	ldr	r3, [r4, #32]
 8000ac2:	b11b      	cbz	r3, 8000acc <__sinit+0x14>
 8000ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ac8:	f7ff bff0 	b.w	8000aac <__sfp_lock_release>
 8000acc:	4b04      	ldr	r3, [pc, #16]	@ (8000ae0 <__sinit+0x28>)
 8000ace:	6223      	str	r3, [r4, #32]
 8000ad0:	4b04      	ldr	r3, [pc, #16]	@ (8000ae4 <__sinit+0x2c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d1f5      	bne.n	8000ac4 <__sinit+0xc>
 8000ad8:	f7ff ffc4 	bl	8000a64 <global_stdio_init.part.0>
 8000adc:	e7f2      	b.n	8000ac4 <__sinit+0xc>
 8000ade:	bf00      	nop
 8000ae0:	08000a25 	.word	0x08000a25
 8000ae4:	2000020c 	.word	0x2000020c

08000ae8 <_fwalk_sglue>:
 8000ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000aec:	4607      	mov	r7, r0
 8000aee:	4688      	mov	r8, r1
 8000af0:	4614      	mov	r4, r2
 8000af2:	2600      	movs	r6, #0
 8000af4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000af8:	f1b9 0901 	subs.w	r9, r9, #1
 8000afc:	d505      	bpl.n	8000b0a <_fwalk_sglue+0x22>
 8000afe:	6824      	ldr	r4, [r4, #0]
 8000b00:	2c00      	cmp	r4, #0
 8000b02:	d1f7      	bne.n	8000af4 <_fwalk_sglue+0xc>
 8000b04:	4630      	mov	r0, r6
 8000b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b0a:	89ab      	ldrh	r3, [r5, #12]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d907      	bls.n	8000b20 <_fwalk_sglue+0x38>
 8000b10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000b14:	3301      	adds	r3, #1
 8000b16:	d003      	beq.n	8000b20 <_fwalk_sglue+0x38>
 8000b18:	4629      	mov	r1, r5
 8000b1a:	4638      	mov	r0, r7
 8000b1c:	47c0      	blx	r8
 8000b1e:	4306      	orrs	r6, r0
 8000b20:	3568      	adds	r5, #104	@ 0x68
 8000b22:	e7e9      	b.n	8000af8 <_fwalk_sglue+0x10>

08000b24 <_puts_r>:
 8000b24:	6a03      	ldr	r3, [r0, #32]
 8000b26:	b570      	push	{r4, r5, r6, lr}
 8000b28:	6884      	ldr	r4, [r0, #8]
 8000b2a:	4605      	mov	r5, r0
 8000b2c:	460e      	mov	r6, r1
 8000b2e:	b90b      	cbnz	r3, 8000b34 <_puts_r+0x10>
 8000b30:	f7ff ffc2 	bl	8000ab8 <__sinit>
 8000b34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000b36:	07db      	lsls	r3, r3, #31
 8000b38:	d405      	bmi.n	8000b46 <_puts_r+0x22>
 8000b3a:	89a3      	ldrh	r3, [r4, #12]
 8000b3c:	0598      	lsls	r0, r3, #22
 8000b3e:	d402      	bmi.n	8000b46 <_puts_r+0x22>
 8000b40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000b42:	f000 f99e 	bl	8000e82 <__retarget_lock_acquire_recursive>
 8000b46:	89a3      	ldrh	r3, [r4, #12]
 8000b48:	0719      	lsls	r1, r3, #28
 8000b4a:	d502      	bpl.n	8000b52 <_puts_r+0x2e>
 8000b4c:	6923      	ldr	r3, [r4, #16]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d135      	bne.n	8000bbe <_puts_r+0x9a>
 8000b52:	4621      	mov	r1, r4
 8000b54:	4628      	mov	r0, r5
 8000b56:	f000 f8c5 	bl	8000ce4 <__swsetup_r>
 8000b5a:	b380      	cbz	r0, 8000bbe <_puts_r+0x9a>
 8000b5c:	f04f 35ff 	mov.w	r5, #4294967295
 8000b60:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000b62:	07da      	lsls	r2, r3, #31
 8000b64:	d405      	bmi.n	8000b72 <_puts_r+0x4e>
 8000b66:	89a3      	ldrh	r3, [r4, #12]
 8000b68:	059b      	lsls	r3, r3, #22
 8000b6a:	d402      	bmi.n	8000b72 <_puts_r+0x4e>
 8000b6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000b6e:	f000 f989 	bl	8000e84 <__retarget_lock_release_recursive>
 8000b72:	4628      	mov	r0, r5
 8000b74:	bd70      	pop	{r4, r5, r6, pc}
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	da04      	bge.n	8000b84 <_puts_r+0x60>
 8000b7a:	69a2      	ldr	r2, [r4, #24]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	dc17      	bgt.n	8000bb0 <_puts_r+0x8c>
 8000b80:	290a      	cmp	r1, #10
 8000b82:	d015      	beq.n	8000bb0 <_puts_r+0x8c>
 8000b84:	6823      	ldr	r3, [r4, #0]
 8000b86:	1c5a      	adds	r2, r3, #1
 8000b88:	6022      	str	r2, [r4, #0]
 8000b8a:	7019      	strb	r1, [r3, #0]
 8000b8c:	68a3      	ldr	r3, [r4, #8]
 8000b8e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000b92:	3b01      	subs	r3, #1
 8000b94:	60a3      	str	r3, [r4, #8]
 8000b96:	2900      	cmp	r1, #0
 8000b98:	d1ed      	bne.n	8000b76 <_puts_r+0x52>
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	da11      	bge.n	8000bc2 <_puts_r+0x9e>
 8000b9e:	4622      	mov	r2, r4
 8000ba0:	210a      	movs	r1, #10
 8000ba2:	4628      	mov	r0, r5
 8000ba4:	f000 f85f 	bl	8000c66 <__swbuf_r>
 8000ba8:	3001      	adds	r0, #1
 8000baa:	d0d7      	beq.n	8000b5c <_puts_r+0x38>
 8000bac:	250a      	movs	r5, #10
 8000bae:	e7d7      	b.n	8000b60 <_puts_r+0x3c>
 8000bb0:	4622      	mov	r2, r4
 8000bb2:	4628      	mov	r0, r5
 8000bb4:	f000 f857 	bl	8000c66 <__swbuf_r>
 8000bb8:	3001      	adds	r0, #1
 8000bba:	d1e7      	bne.n	8000b8c <_puts_r+0x68>
 8000bbc:	e7ce      	b.n	8000b5c <_puts_r+0x38>
 8000bbe:	3e01      	subs	r6, #1
 8000bc0:	e7e4      	b.n	8000b8c <_puts_r+0x68>
 8000bc2:	6823      	ldr	r3, [r4, #0]
 8000bc4:	1c5a      	adds	r2, r3, #1
 8000bc6:	6022      	str	r2, [r4, #0]
 8000bc8:	220a      	movs	r2, #10
 8000bca:	701a      	strb	r2, [r3, #0]
 8000bcc:	e7ee      	b.n	8000bac <_puts_r+0x88>
	...

08000bd0 <puts>:
 8000bd0:	4b02      	ldr	r3, [pc, #8]	@ (8000bdc <puts+0xc>)
 8000bd2:	4601      	mov	r1, r0
 8000bd4:	6818      	ldr	r0, [r3, #0]
 8000bd6:	f7ff bfa5 	b.w	8000b24 <_puts_r>
 8000bda:	bf00      	nop
 8000bdc:	20000010 	.word	0x20000010

08000be0 <__sread>:
 8000be0:	b510      	push	{r4, lr}
 8000be2:	460c      	mov	r4, r1
 8000be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000be8:	f000 f8fc 	bl	8000de4 <_read_r>
 8000bec:	2800      	cmp	r0, #0
 8000bee:	bfab      	itete	ge
 8000bf0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000bf2:	89a3      	ldrhlt	r3, [r4, #12]
 8000bf4:	181b      	addge	r3, r3, r0
 8000bf6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000bfa:	bfac      	ite	ge
 8000bfc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000bfe:	81a3      	strhlt	r3, [r4, #12]
 8000c00:	bd10      	pop	{r4, pc}

08000c02 <__swrite>:
 8000c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c06:	461f      	mov	r7, r3
 8000c08:	898b      	ldrh	r3, [r1, #12]
 8000c0a:	05db      	lsls	r3, r3, #23
 8000c0c:	4605      	mov	r5, r0
 8000c0e:	460c      	mov	r4, r1
 8000c10:	4616      	mov	r6, r2
 8000c12:	d505      	bpl.n	8000c20 <__swrite+0x1e>
 8000c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c18:	2302      	movs	r3, #2
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f000 f8d0 	bl	8000dc0 <_lseek_r>
 8000c20:	89a3      	ldrh	r3, [r4, #12]
 8000c22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000c26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000c2a:	81a3      	strh	r3, [r4, #12]
 8000c2c:	4632      	mov	r2, r6
 8000c2e:	463b      	mov	r3, r7
 8000c30:	4628      	mov	r0, r5
 8000c32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000c36:	f000 b8e7 	b.w	8000e08 <_write_r>

08000c3a <__sseek>:
 8000c3a:	b510      	push	{r4, lr}
 8000c3c:	460c      	mov	r4, r1
 8000c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c42:	f000 f8bd 	bl	8000dc0 <_lseek_r>
 8000c46:	1c43      	adds	r3, r0, #1
 8000c48:	89a3      	ldrh	r3, [r4, #12]
 8000c4a:	bf15      	itete	ne
 8000c4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000c4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000c52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000c56:	81a3      	strheq	r3, [r4, #12]
 8000c58:	bf18      	it	ne
 8000c5a:	81a3      	strhne	r3, [r4, #12]
 8000c5c:	bd10      	pop	{r4, pc}

08000c5e <__sclose>:
 8000c5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c62:	f000 b89d 	b.w	8000da0 <_close_r>

08000c66 <__swbuf_r>:
 8000c66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c68:	460e      	mov	r6, r1
 8000c6a:	4614      	mov	r4, r2
 8000c6c:	4605      	mov	r5, r0
 8000c6e:	b118      	cbz	r0, 8000c78 <__swbuf_r+0x12>
 8000c70:	6a03      	ldr	r3, [r0, #32]
 8000c72:	b90b      	cbnz	r3, 8000c78 <__swbuf_r+0x12>
 8000c74:	f7ff ff20 	bl	8000ab8 <__sinit>
 8000c78:	69a3      	ldr	r3, [r4, #24]
 8000c7a:	60a3      	str	r3, [r4, #8]
 8000c7c:	89a3      	ldrh	r3, [r4, #12]
 8000c7e:	071a      	lsls	r2, r3, #28
 8000c80:	d501      	bpl.n	8000c86 <__swbuf_r+0x20>
 8000c82:	6923      	ldr	r3, [r4, #16]
 8000c84:	b943      	cbnz	r3, 8000c98 <__swbuf_r+0x32>
 8000c86:	4621      	mov	r1, r4
 8000c88:	4628      	mov	r0, r5
 8000c8a:	f000 f82b 	bl	8000ce4 <__swsetup_r>
 8000c8e:	b118      	cbz	r0, 8000c98 <__swbuf_r+0x32>
 8000c90:	f04f 37ff 	mov.w	r7, #4294967295
 8000c94:	4638      	mov	r0, r7
 8000c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c98:	6823      	ldr	r3, [r4, #0]
 8000c9a:	6922      	ldr	r2, [r4, #16]
 8000c9c:	1a98      	subs	r0, r3, r2
 8000c9e:	6963      	ldr	r3, [r4, #20]
 8000ca0:	b2f6      	uxtb	r6, r6
 8000ca2:	4283      	cmp	r3, r0
 8000ca4:	4637      	mov	r7, r6
 8000ca6:	dc05      	bgt.n	8000cb4 <__swbuf_r+0x4e>
 8000ca8:	4621      	mov	r1, r4
 8000caa:	4628      	mov	r0, r5
 8000cac:	f000 fa64 	bl	8001178 <_fflush_r>
 8000cb0:	2800      	cmp	r0, #0
 8000cb2:	d1ed      	bne.n	8000c90 <__swbuf_r+0x2a>
 8000cb4:	68a3      	ldr	r3, [r4, #8]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	60a3      	str	r3, [r4, #8]
 8000cba:	6823      	ldr	r3, [r4, #0]
 8000cbc:	1c5a      	adds	r2, r3, #1
 8000cbe:	6022      	str	r2, [r4, #0]
 8000cc0:	701e      	strb	r6, [r3, #0]
 8000cc2:	6962      	ldr	r2, [r4, #20]
 8000cc4:	1c43      	adds	r3, r0, #1
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d004      	beq.n	8000cd4 <__swbuf_r+0x6e>
 8000cca:	89a3      	ldrh	r3, [r4, #12]
 8000ccc:	07db      	lsls	r3, r3, #31
 8000cce:	d5e1      	bpl.n	8000c94 <__swbuf_r+0x2e>
 8000cd0:	2e0a      	cmp	r6, #10
 8000cd2:	d1df      	bne.n	8000c94 <__swbuf_r+0x2e>
 8000cd4:	4621      	mov	r1, r4
 8000cd6:	4628      	mov	r0, r5
 8000cd8:	f000 fa4e 	bl	8001178 <_fflush_r>
 8000cdc:	2800      	cmp	r0, #0
 8000cde:	d0d9      	beq.n	8000c94 <__swbuf_r+0x2e>
 8000ce0:	e7d6      	b.n	8000c90 <__swbuf_r+0x2a>
	...

08000ce4 <__swsetup_r>:
 8000ce4:	b538      	push	{r3, r4, r5, lr}
 8000ce6:	4b29      	ldr	r3, [pc, #164]	@ (8000d8c <__swsetup_r+0xa8>)
 8000ce8:	4605      	mov	r5, r0
 8000cea:	6818      	ldr	r0, [r3, #0]
 8000cec:	460c      	mov	r4, r1
 8000cee:	b118      	cbz	r0, 8000cf8 <__swsetup_r+0x14>
 8000cf0:	6a03      	ldr	r3, [r0, #32]
 8000cf2:	b90b      	cbnz	r3, 8000cf8 <__swsetup_r+0x14>
 8000cf4:	f7ff fee0 	bl	8000ab8 <__sinit>
 8000cf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cfc:	0719      	lsls	r1, r3, #28
 8000cfe:	d422      	bmi.n	8000d46 <__swsetup_r+0x62>
 8000d00:	06da      	lsls	r2, r3, #27
 8000d02:	d407      	bmi.n	8000d14 <__swsetup_r+0x30>
 8000d04:	2209      	movs	r2, #9
 8000d06:	602a      	str	r2, [r5, #0]
 8000d08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d0c:	81a3      	strh	r3, [r4, #12]
 8000d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d12:	e033      	b.n	8000d7c <__swsetup_r+0x98>
 8000d14:	0758      	lsls	r0, r3, #29
 8000d16:	d512      	bpl.n	8000d3e <__swsetup_r+0x5a>
 8000d18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000d1a:	b141      	cbz	r1, 8000d2e <__swsetup_r+0x4a>
 8000d1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d002      	beq.n	8000d2a <__swsetup_r+0x46>
 8000d24:	4628      	mov	r0, r5
 8000d26:	f000 f8af 	bl	8000e88 <_free_r>
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8000d2e:	89a3      	ldrh	r3, [r4, #12]
 8000d30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000d34:	81a3      	strh	r3, [r4, #12]
 8000d36:	2300      	movs	r3, #0
 8000d38:	6063      	str	r3, [r4, #4]
 8000d3a:	6923      	ldr	r3, [r4, #16]
 8000d3c:	6023      	str	r3, [r4, #0]
 8000d3e:	89a3      	ldrh	r3, [r4, #12]
 8000d40:	f043 0308 	orr.w	r3, r3, #8
 8000d44:	81a3      	strh	r3, [r4, #12]
 8000d46:	6923      	ldr	r3, [r4, #16]
 8000d48:	b94b      	cbnz	r3, 8000d5e <__swsetup_r+0x7a>
 8000d4a:	89a3      	ldrh	r3, [r4, #12]
 8000d4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000d50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000d54:	d003      	beq.n	8000d5e <__swsetup_r+0x7a>
 8000d56:	4621      	mov	r1, r4
 8000d58:	4628      	mov	r0, r5
 8000d5a:	f000 fa5b 	bl	8001214 <__smakebuf_r>
 8000d5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d62:	f013 0201 	ands.w	r2, r3, #1
 8000d66:	d00a      	beq.n	8000d7e <__swsetup_r+0x9a>
 8000d68:	2200      	movs	r2, #0
 8000d6a:	60a2      	str	r2, [r4, #8]
 8000d6c:	6962      	ldr	r2, [r4, #20]
 8000d6e:	4252      	negs	r2, r2
 8000d70:	61a2      	str	r2, [r4, #24]
 8000d72:	6922      	ldr	r2, [r4, #16]
 8000d74:	b942      	cbnz	r2, 8000d88 <__swsetup_r+0xa4>
 8000d76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000d7a:	d1c5      	bne.n	8000d08 <__swsetup_r+0x24>
 8000d7c:	bd38      	pop	{r3, r4, r5, pc}
 8000d7e:	0799      	lsls	r1, r3, #30
 8000d80:	bf58      	it	pl
 8000d82:	6962      	ldrpl	r2, [r4, #20]
 8000d84:	60a2      	str	r2, [r4, #8]
 8000d86:	e7f4      	b.n	8000d72 <__swsetup_r+0x8e>
 8000d88:	2000      	movs	r0, #0
 8000d8a:	e7f7      	b.n	8000d7c <__swsetup_r+0x98>
 8000d8c:	20000010 	.word	0x20000010

08000d90 <memset>:
 8000d90:	4402      	add	r2, r0
 8000d92:	4603      	mov	r3, r0
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d100      	bne.n	8000d9a <memset+0xa>
 8000d98:	4770      	bx	lr
 8000d9a:	f803 1b01 	strb.w	r1, [r3], #1
 8000d9e:	e7f9      	b.n	8000d94 <memset+0x4>

08000da0 <_close_r>:
 8000da0:	b538      	push	{r3, r4, r5, lr}
 8000da2:	4d06      	ldr	r5, [pc, #24]	@ (8000dbc <_close_r+0x1c>)
 8000da4:	2300      	movs	r3, #0
 8000da6:	4604      	mov	r4, r0
 8000da8:	4608      	mov	r0, r1
 8000daa:	602b      	str	r3, [r5, #0]
 8000dac:	f7ff fd67 	bl	800087e <_close>
 8000db0:	1c43      	adds	r3, r0, #1
 8000db2:	d102      	bne.n	8000dba <_close_r+0x1a>
 8000db4:	682b      	ldr	r3, [r5, #0]
 8000db6:	b103      	cbz	r3, 8000dba <_close_r+0x1a>
 8000db8:	6023      	str	r3, [r4, #0]
 8000dba:	bd38      	pop	{r3, r4, r5, pc}
 8000dbc:	20000210 	.word	0x20000210

08000dc0 <_lseek_r>:
 8000dc0:	b538      	push	{r3, r4, r5, lr}
 8000dc2:	4d07      	ldr	r5, [pc, #28]	@ (8000de0 <_lseek_r+0x20>)
 8000dc4:	4604      	mov	r4, r0
 8000dc6:	4608      	mov	r0, r1
 8000dc8:	4611      	mov	r1, r2
 8000dca:	2200      	movs	r2, #0
 8000dcc:	602a      	str	r2, [r5, #0]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	f7ff fd79 	bl	80008c6 <_lseek>
 8000dd4:	1c43      	adds	r3, r0, #1
 8000dd6:	d102      	bne.n	8000dde <_lseek_r+0x1e>
 8000dd8:	682b      	ldr	r3, [r5, #0]
 8000dda:	b103      	cbz	r3, 8000dde <_lseek_r+0x1e>
 8000ddc:	6023      	str	r3, [r4, #0]
 8000dde:	bd38      	pop	{r3, r4, r5, pc}
 8000de0:	20000210 	.word	0x20000210

08000de4 <_read_r>:
 8000de4:	b538      	push	{r3, r4, r5, lr}
 8000de6:	4d07      	ldr	r5, [pc, #28]	@ (8000e04 <_read_r+0x20>)
 8000de8:	4604      	mov	r4, r0
 8000dea:	4608      	mov	r0, r1
 8000dec:	4611      	mov	r1, r2
 8000dee:	2200      	movs	r2, #0
 8000df0:	602a      	str	r2, [r5, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	f7ff fd0a 	bl	800080c <_read>
 8000df8:	1c43      	adds	r3, r0, #1
 8000dfa:	d102      	bne.n	8000e02 <_read_r+0x1e>
 8000dfc:	682b      	ldr	r3, [r5, #0]
 8000dfe:	b103      	cbz	r3, 8000e02 <_read_r+0x1e>
 8000e00:	6023      	str	r3, [r4, #0]
 8000e02:	bd38      	pop	{r3, r4, r5, pc}
 8000e04:	20000210 	.word	0x20000210

08000e08 <_write_r>:
 8000e08:	b538      	push	{r3, r4, r5, lr}
 8000e0a:	4d07      	ldr	r5, [pc, #28]	@ (8000e28 <_write_r+0x20>)
 8000e0c:	4604      	mov	r4, r0
 8000e0e:	4608      	mov	r0, r1
 8000e10:	4611      	mov	r1, r2
 8000e12:	2200      	movs	r2, #0
 8000e14:	602a      	str	r2, [r5, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	f7ff fd15 	bl	8000846 <_write>
 8000e1c:	1c43      	adds	r3, r0, #1
 8000e1e:	d102      	bne.n	8000e26 <_write_r+0x1e>
 8000e20:	682b      	ldr	r3, [r5, #0]
 8000e22:	b103      	cbz	r3, 8000e26 <_write_r+0x1e>
 8000e24:	6023      	str	r3, [r4, #0]
 8000e26:	bd38      	pop	{r3, r4, r5, pc}
 8000e28:	20000210 	.word	0x20000210

08000e2c <__errno>:
 8000e2c:	4b01      	ldr	r3, [pc, #4]	@ (8000e34 <__errno+0x8>)
 8000e2e:	6818      	ldr	r0, [r3, #0]
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	20000010 	.word	0x20000010

08000e38 <__libc_init_array>:
 8000e38:	b570      	push	{r4, r5, r6, lr}
 8000e3a:	4d0d      	ldr	r5, [pc, #52]	@ (8000e70 <__libc_init_array+0x38>)
 8000e3c:	4c0d      	ldr	r4, [pc, #52]	@ (8000e74 <__libc_init_array+0x3c>)
 8000e3e:	1b64      	subs	r4, r4, r5
 8000e40:	10a4      	asrs	r4, r4, #2
 8000e42:	2600      	movs	r6, #0
 8000e44:	42a6      	cmp	r6, r4
 8000e46:	d109      	bne.n	8000e5c <__libc_init_array+0x24>
 8000e48:	4d0b      	ldr	r5, [pc, #44]	@ (8000e78 <__libc_init_array+0x40>)
 8000e4a:	4c0c      	ldr	r4, [pc, #48]	@ (8000e7c <__libc_init_array+0x44>)
 8000e4c:	f000 fa50 	bl	80012f0 <_init>
 8000e50:	1b64      	subs	r4, r4, r5
 8000e52:	10a4      	asrs	r4, r4, #2
 8000e54:	2600      	movs	r6, #0
 8000e56:	42a6      	cmp	r6, r4
 8000e58:	d105      	bne.n	8000e66 <__libc_init_array+0x2e>
 8000e5a:	bd70      	pop	{r4, r5, r6, pc}
 8000e5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e60:	4798      	blx	r3
 8000e62:	3601      	adds	r6, #1
 8000e64:	e7ee      	b.n	8000e44 <__libc_init_array+0xc>
 8000e66:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e6a:	4798      	blx	r3
 8000e6c:	3601      	adds	r6, #1
 8000e6e:	e7f2      	b.n	8000e56 <__libc_init_array+0x1e>
 8000e70:	08001368 	.word	0x08001368
 8000e74:	08001368 	.word	0x08001368
 8000e78:	08001368 	.word	0x08001368
 8000e7c:	0800136c 	.word	0x0800136c

08000e80 <__retarget_lock_init_recursive>:
 8000e80:	4770      	bx	lr

08000e82 <__retarget_lock_acquire_recursive>:
 8000e82:	4770      	bx	lr

08000e84 <__retarget_lock_release_recursive>:
 8000e84:	4770      	bx	lr
	...

08000e88 <_free_r>:
 8000e88:	b538      	push	{r3, r4, r5, lr}
 8000e8a:	4605      	mov	r5, r0
 8000e8c:	2900      	cmp	r1, #0
 8000e8e:	d041      	beq.n	8000f14 <_free_r+0x8c>
 8000e90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e94:	1f0c      	subs	r4, r1, #4
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	bfb8      	it	lt
 8000e9a:	18e4      	addlt	r4, r4, r3
 8000e9c:	f000 f8e0 	bl	8001060 <__malloc_lock>
 8000ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8000f18 <_free_r+0x90>)
 8000ea2:	6813      	ldr	r3, [r2, #0]
 8000ea4:	b933      	cbnz	r3, 8000eb4 <_free_r+0x2c>
 8000ea6:	6063      	str	r3, [r4, #4]
 8000ea8:	6014      	str	r4, [r2, #0]
 8000eaa:	4628      	mov	r0, r5
 8000eac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000eb0:	f000 b8dc 	b.w	800106c <__malloc_unlock>
 8000eb4:	42a3      	cmp	r3, r4
 8000eb6:	d908      	bls.n	8000eca <_free_r+0x42>
 8000eb8:	6820      	ldr	r0, [r4, #0]
 8000eba:	1821      	adds	r1, r4, r0
 8000ebc:	428b      	cmp	r3, r1
 8000ebe:	bf01      	itttt	eq
 8000ec0:	6819      	ldreq	r1, [r3, #0]
 8000ec2:	685b      	ldreq	r3, [r3, #4]
 8000ec4:	1809      	addeq	r1, r1, r0
 8000ec6:	6021      	streq	r1, [r4, #0]
 8000ec8:	e7ed      	b.n	8000ea6 <_free_r+0x1e>
 8000eca:	461a      	mov	r2, r3
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	b10b      	cbz	r3, 8000ed4 <_free_r+0x4c>
 8000ed0:	42a3      	cmp	r3, r4
 8000ed2:	d9fa      	bls.n	8000eca <_free_r+0x42>
 8000ed4:	6811      	ldr	r1, [r2, #0]
 8000ed6:	1850      	adds	r0, r2, r1
 8000ed8:	42a0      	cmp	r0, r4
 8000eda:	d10b      	bne.n	8000ef4 <_free_r+0x6c>
 8000edc:	6820      	ldr	r0, [r4, #0]
 8000ede:	4401      	add	r1, r0
 8000ee0:	1850      	adds	r0, r2, r1
 8000ee2:	4283      	cmp	r3, r0
 8000ee4:	6011      	str	r1, [r2, #0]
 8000ee6:	d1e0      	bne.n	8000eaa <_free_r+0x22>
 8000ee8:	6818      	ldr	r0, [r3, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	6053      	str	r3, [r2, #4]
 8000eee:	4408      	add	r0, r1
 8000ef0:	6010      	str	r0, [r2, #0]
 8000ef2:	e7da      	b.n	8000eaa <_free_r+0x22>
 8000ef4:	d902      	bls.n	8000efc <_free_r+0x74>
 8000ef6:	230c      	movs	r3, #12
 8000ef8:	602b      	str	r3, [r5, #0]
 8000efa:	e7d6      	b.n	8000eaa <_free_r+0x22>
 8000efc:	6820      	ldr	r0, [r4, #0]
 8000efe:	1821      	adds	r1, r4, r0
 8000f00:	428b      	cmp	r3, r1
 8000f02:	bf04      	itt	eq
 8000f04:	6819      	ldreq	r1, [r3, #0]
 8000f06:	685b      	ldreq	r3, [r3, #4]
 8000f08:	6063      	str	r3, [r4, #4]
 8000f0a:	bf04      	itt	eq
 8000f0c:	1809      	addeq	r1, r1, r0
 8000f0e:	6021      	streq	r1, [r4, #0]
 8000f10:	6054      	str	r4, [r2, #4]
 8000f12:	e7ca      	b.n	8000eaa <_free_r+0x22>
 8000f14:	bd38      	pop	{r3, r4, r5, pc}
 8000f16:	bf00      	nop
 8000f18:	2000021c 	.word	0x2000021c

08000f1c <sbrk_aligned>:
 8000f1c:	b570      	push	{r4, r5, r6, lr}
 8000f1e:	4e0f      	ldr	r6, [pc, #60]	@ (8000f5c <sbrk_aligned+0x40>)
 8000f20:	460c      	mov	r4, r1
 8000f22:	6831      	ldr	r1, [r6, #0]
 8000f24:	4605      	mov	r5, r0
 8000f26:	b911      	cbnz	r1, 8000f2e <sbrk_aligned+0x12>
 8000f28:	f000 f9d2 	bl	80012d0 <_sbrk_r>
 8000f2c:	6030      	str	r0, [r6, #0]
 8000f2e:	4621      	mov	r1, r4
 8000f30:	4628      	mov	r0, r5
 8000f32:	f000 f9cd 	bl	80012d0 <_sbrk_r>
 8000f36:	1c43      	adds	r3, r0, #1
 8000f38:	d103      	bne.n	8000f42 <sbrk_aligned+0x26>
 8000f3a:	f04f 34ff 	mov.w	r4, #4294967295
 8000f3e:	4620      	mov	r0, r4
 8000f40:	bd70      	pop	{r4, r5, r6, pc}
 8000f42:	1cc4      	adds	r4, r0, #3
 8000f44:	f024 0403 	bic.w	r4, r4, #3
 8000f48:	42a0      	cmp	r0, r4
 8000f4a:	d0f8      	beq.n	8000f3e <sbrk_aligned+0x22>
 8000f4c:	1a21      	subs	r1, r4, r0
 8000f4e:	4628      	mov	r0, r5
 8000f50:	f000 f9be 	bl	80012d0 <_sbrk_r>
 8000f54:	3001      	adds	r0, #1
 8000f56:	d1f2      	bne.n	8000f3e <sbrk_aligned+0x22>
 8000f58:	e7ef      	b.n	8000f3a <sbrk_aligned+0x1e>
 8000f5a:	bf00      	nop
 8000f5c:	20000218 	.word	0x20000218

08000f60 <_malloc_r>:
 8000f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f64:	1ccd      	adds	r5, r1, #3
 8000f66:	f025 0503 	bic.w	r5, r5, #3
 8000f6a:	3508      	adds	r5, #8
 8000f6c:	2d0c      	cmp	r5, #12
 8000f6e:	bf38      	it	cc
 8000f70:	250c      	movcc	r5, #12
 8000f72:	2d00      	cmp	r5, #0
 8000f74:	4606      	mov	r6, r0
 8000f76:	db01      	blt.n	8000f7c <_malloc_r+0x1c>
 8000f78:	42a9      	cmp	r1, r5
 8000f7a:	d904      	bls.n	8000f86 <_malloc_r+0x26>
 8000f7c:	230c      	movs	r3, #12
 8000f7e:	6033      	str	r3, [r6, #0]
 8000f80:	2000      	movs	r0, #0
 8000f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800105c <_malloc_r+0xfc>
 8000f8a:	f000 f869 	bl	8001060 <__malloc_lock>
 8000f8e:	f8d8 3000 	ldr.w	r3, [r8]
 8000f92:	461c      	mov	r4, r3
 8000f94:	bb44      	cbnz	r4, 8000fe8 <_malloc_r+0x88>
 8000f96:	4629      	mov	r1, r5
 8000f98:	4630      	mov	r0, r6
 8000f9a:	f7ff ffbf 	bl	8000f1c <sbrk_aligned>
 8000f9e:	1c43      	adds	r3, r0, #1
 8000fa0:	4604      	mov	r4, r0
 8000fa2:	d158      	bne.n	8001056 <_malloc_r+0xf6>
 8000fa4:	f8d8 4000 	ldr.w	r4, [r8]
 8000fa8:	4627      	mov	r7, r4
 8000faa:	2f00      	cmp	r7, #0
 8000fac:	d143      	bne.n	8001036 <_malloc_r+0xd6>
 8000fae:	2c00      	cmp	r4, #0
 8000fb0:	d04b      	beq.n	800104a <_malloc_r+0xea>
 8000fb2:	6823      	ldr	r3, [r4, #0]
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	4630      	mov	r0, r6
 8000fb8:	eb04 0903 	add.w	r9, r4, r3
 8000fbc:	f000 f988 	bl	80012d0 <_sbrk_r>
 8000fc0:	4581      	cmp	r9, r0
 8000fc2:	d142      	bne.n	800104a <_malloc_r+0xea>
 8000fc4:	6821      	ldr	r1, [r4, #0]
 8000fc6:	1a6d      	subs	r5, r5, r1
 8000fc8:	4629      	mov	r1, r5
 8000fca:	4630      	mov	r0, r6
 8000fcc:	f7ff ffa6 	bl	8000f1c <sbrk_aligned>
 8000fd0:	3001      	adds	r0, #1
 8000fd2:	d03a      	beq.n	800104a <_malloc_r+0xea>
 8000fd4:	6823      	ldr	r3, [r4, #0]
 8000fd6:	442b      	add	r3, r5
 8000fd8:	6023      	str	r3, [r4, #0]
 8000fda:	f8d8 3000 	ldr.w	r3, [r8]
 8000fde:	685a      	ldr	r2, [r3, #4]
 8000fe0:	bb62      	cbnz	r2, 800103c <_malloc_r+0xdc>
 8000fe2:	f8c8 7000 	str.w	r7, [r8]
 8000fe6:	e00f      	b.n	8001008 <_malloc_r+0xa8>
 8000fe8:	6822      	ldr	r2, [r4, #0]
 8000fea:	1b52      	subs	r2, r2, r5
 8000fec:	d420      	bmi.n	8001030 <_malloc_r+0xd0>
 8000fee:	2a0b      	cmp	r2, #11
 8000ff0:	d917      	bls.n	8001022 <_malloc_r+0xc2>
 8000ff2:	1961      	adds	r1, r4, r5
 8000ff4:	42a3      	cmp	r3, r4
 8000ff6:	6025      	str	r5, [r4, #0]
 8000ff8:	bf18      	it	ne
 8000ffa:	6059      	strne	r1, [r3, #4]
 8000ffc:	6863      	ldr	r3, [r4, #4]
 8000ffe:	bf08      	it	eq
 8001000:	f8c8 1000 	streq.w	r1, [r8]
 8001004:	5162      	str	r2, [r4, r5]
 8001006:	604b      	str	r3, [r1, #4]
 8001008:	4630      	mov	r0, r6
 800100a:	f000 f82f 	bl	800106c <__malloc_unlock>
 800100e:	f104 000b 	add.w	r0, r4, #11
 8001012:	1d23      	adds	r3, r4, #4
 8001014:	f020 0007 	bic.w	r0, r0, #7
 8001018:	1ac2      	subs	r2, r0, r3
 800101a:	bf1c      	itt	ne
 800101c:	1a1b      	subne	r3, r3, r0
 800101e:	50a3      	strne	r3, [r4, r2]
 8001020:	e7af      	b.n	8000f82 <_malloc_r+0x22>
 8001022:	6862      	ldr	r2, [r4, #4]
 8001024:	42a3      	cmp	r3, r4
 8001026:	bf0c      	ite	eq
 8001028:	f8c8 2000 	streq.w	r2, [r8]
 800102c:	605a      	strne	r2, [r3, #4]
 800102e:	e7eb      	b.n	8001008 <_malloc_r+0xa8>
 8001030:	4623      	mov	r3, r4
 8001032:	6864      	ldr	r4, [r4, #4]
 8001034:	e7ae      	b.n	8000f94 <_malloc_r+0x34>
 8001036:	463c      	mov	r4, r7
 8001038:	687f      	ldr	r7, [r7, #4]
 800103a:	e7b6      	b.n	8000faa <_malloc_r+0x4a>
 800103c:	461a      	mov	r2, r3
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	42a3      	cmp	r3, r4
 8001042:	d1fb      	bne.n	800103c <_malloc_r+0xdc>
 8001044:	2300      	movs	r3, #0
 8001046:	6053      	str	r3, [r2, #4]
 8001048:	e7de      	b.n	8001008 <_malloc_r+0xa8>
 800104a:	230c      	movs	r3, #12
 800104c:	6033      	str	r3, [r6, #0]
 800104e:	4630      	mov	r0, r6
 8001050:	f000 f80c 	bl	800106c <__malloc_unlock>
 8001054:	e794      	b.n	8000f80 <_malloc_r+0x20>
 8001056:	6005      	str	r5, [r0, #0]
 8001058:	e7d6      	b.n	8001008 <_malloc_r+0xa8>
 800105a:	bf00      	nop
 800105c:	2000021c 	.word	0x2000021c

08001060 <__malloc_lock>:
 8001060:	4801      	ldr	r0, [pc, #4]	@ (8001068 <__malloc_lock+0x8>)
 8001062:	f7ff bf0e 	b.w	8000e82 <__retarget_lock_acquire_recursive>
 8001066:	bf00      	nop
 8001068:	20000214 	.word	0x20000214

0800106c <__malloc_unlock>:
 800106c:	4801      	ldr	r0, [pc, #4]	@ (8001074 <__malloc_unlock+0x8>)
 800106e:	f7ff bf09 	b.w	8000e84 <__retarget_lock_release_recursive>
 8001072:	bf00      	nop
 8001074:	20000214 	.word	0x20000214

08001078 <__sflush_r>:
 8001078:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800107c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800107e:	0716      	lsls	r6, r2, #28
 8001080:	4605      	mov	r5, r0
 8001082:	460c      	mov	r4, r1
 8001084:	d454      	bmi.n	8001130 <__sflush_r+0xb8>
 8001086:	684b      	ldr	r3, [r1, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	dc02      	bgt.n	8001092 <__sflush_r+0x1a>
 800108c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800108e:	2b00      	cmp	r3, #0
 8001090:	dd48      	ble.n	8001124 <__sflush_r+0xac>
 8001092:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001094:	2e00      	cmp	r6, #0
 8001096:	d045      	beq.n	8001124 <__sflush_r+0xac>
 8001098:	2300      	movs	r3, #0
 800109a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800109e:	682f      	ldr	r7, [r5, #0]
 80010a0:	6a21      	ldr	r1, [r4, #32]
 80010a2:	602b      	str	r3, [r5, #0]
 80010a4:	d030      	beq.n	8001108 <__sflush_r+0x90>
 80010a6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80010a8:	89a3      	ldrh	r3, [r4, #12]
 80010aa:	0759      	lsls	r1, r3, #29
 80010ac:	d505      	bpl.n	80010ba <__sflush_r+0x42>
 80010ae:	6863      	ldr	r3, [r4, #4]
 80010b0:	1ad2      	subs	r2, r2, r3
 80010b2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80010b4:	b10b      	cbz	r3, 80010ba <__sflush_r+0x42>
 80010b6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80010b8:	1ad2      	subs	r2, r2, r3
 80010ba:	2300      	movs	r3, #0
 80010bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80010be:	6a21      	ldr	r1, [r4, #32]
 80010c0:	4628      	mov	r0, r5
 80010c2:	47b0      	blx	r6
 80010c4:	1c43      	adds	r3, r0, #1
 80010c6:	89a3      	ldrh	r3, [r4, #12]
 80010c8:	d106      	bne.n	80010d8 <__sflush_r+0x60>
 80010ca:	6829      	ldr	r1, [r5, #0]
 80010cc:	291d      	cmp	r1, #29
 80010ce:	d82b      	bhi.n	8001128 <__sflush_r+0xb0>
 80010d0:	4a28      	ldr	r2, [pc, #160]	@ (8001174 <__sflush_r+0xfc>)
 80010d2:	410a      	asrs	r2, r1
 80010d4:	07d6      	lsls	r6, r2, #31
 80010d6:	d427      	bmi.n	8001128 <__sflush_r+0xb0>
 80010d8:	2200      	movs	r2, #0
 80010da:	6062      	str	r2, [r4, #4]
 80010dc:	04d9      	lsls	r1, r3, #19
 80010de:	6922      	ldr	r2, [r4, #16]
 80010e0:	6022      	str	r2, [r4, #0]
 80010e2:	d504      	bpl.n	80010ee <__sflush_r+0x76>
 80010e4:	1c42      	adds	r2, r0, #1
 80010e6:	d101      	bne.n	80010ec <__sflush_r+0x74>
 80010e8:	682b      	ldr	r3, [r5, #0]
 80010ea:	b903      	cbnz	r3, 80010ee <__sflush_r+0x76>
 80010ec:	6560      	str	r0, [r4, #84]	@ 0x54
 80010ee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80010f0:	602f      	str	r7, [r5, #0]
 80010f2:	b1b9      	cbz	r1, 8001124 <__sflush_r+0xac>
 80010f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80010f8:	4299      	cmp	r1, r3
 80010fa:	d002      	beq.n	8001102 <__sflush_r+0x8a>
 80010fc:	4628      	mov	r0, r5
 80010fe:	f7ff fec3 	bl	8000e88 <_free_r>
 8001102:	2300      	movs	r3, #0
 8001104:	6363      	str	r3, [r4, #52]	@ 0x34
 8001106:	e00d      	b.n	8001124 <__sflush_r+0xac>
 8001108:	2301      	movs	r3, #1
 800110a:	4628      	mov	r0, r5
 800110c:	47b0      	blx	r6
 800110e:	4602      	mov	r2, r0
 8001110:	1c50      	adds	r0, r2, #1
 8001112:	d1c9      	bne.n	80010a8 <__sflush_r+0x30>
 8001114:	682b      	ldr	r3, [r5, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d0c6      	beq.n	80010a8 <__sflush_r+0x30>
 800111a:	2b1d      	cmp	r3, #29
 800111c:	d001      	beq.n	8001122 <__sflush_r+0xaa>
 800111e:	2b16      	cmp	r3, #22
 8001120:	d11d      	bne.n	800115e <__sflush_r+0xe6>
 8001122:	602f      	str	r7, [r5, #0]
 8001124:	2000      	movs	r0, #0
 8001126:	e021      	b.n	800116c <__sflush_r+0xf4>
 8001128:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800112c:	b21b      	sxth	r3, r3
 800112e:	e01a      	b.n	8001166 <__sflush_r+0xee>
 8001130:	690f      	ldr	r7, [r1, #16]
 8001132:	2f00      	cmp	r7, #0
 8001134:	d0f6      	beq.n	8001124 <__sflush_r+0xac>
 8001136:	0793      	lsls	r3, r2, #30
 8001138:	680e      	ldr	r6, [r1, #0]
 800113a:	bf08      	it	eq
 800113c:	694b      	ldreq	r3, [r1, #20]
 800113e:	600f      	str	r7, [r1, #0]
 8001140:	bf18      	it	ne
 8001142:	2300      	movne	r3, #0
 8001144:	1bf6      	subs	r6, r6, r7
 8001146:	608b      	str	r3, [r1, #8]
 8001148:	2e00      	cmp	r6, #0
 800114a:	ddeb      	ble.n	8001124 <__sflush_r+0xac>
 800114c:	6a21      	ldr	r1, [r4, #32]
 800114e:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001152:	4633      	mov	r3, r6
 8001154:	463a      	mov	r2, r7
 8001156:	4628      	mov	r0, r5
 8001158:	47e0      	blx	ip
 800115a:	2800      	cmp	r0, #0
 800115c:	dc07      	bgt.n	800116e <__sflush_r+0xf6>
 800115e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001162:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001166:	81a3      	strh	r3, [r4, #12]
 8001168:	f04f 30ff 	mov.w	r0, #4294967295
 800116c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800116e:	4407      	add	r7, r0
 8001170:	1a36      	subs	r6, r6, r0
 8001172:	e7e9      	b.n	8001148 <__sflush_r+0xd0>
 8001174:	dfbffffe 	.word	0xdfbffffe

08001178 <_fflush_r>:
 8001178:	b538      	push	{r3, r4, r5, lr}
 800117a:	690b      	ldr	r3, [r1, #16]
 800117c:	4605      	mov	r5, r0
 800117e:	460c      	mov	r4, r1
 8001180:	b913      	cbnz	r3, 8001188 <_fflush_r+0x10>
 8001182:	2500      	movs	r5, #0
 8001184:	4628      	mov	r0, r5
 8001186:	bd38      	pop	{r3, r4, r5, pc}
 8001188:	b118      	cbz	r0, 8001192 <_fflush_r+0x1a>
 800118a:	6a03      	ldr	r3, [r0, #32]
 800118c:	b90b      	cbnz	r3, 8001192 <_fflush_r+0x1a>
 800118e:	f7ff fc93 	bl	8000ab8 <__sinit>
 8001192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0f3      	beq.n	8001182 <_fflush_r+0xa>
 800119a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800119c:	07d0      	lsls	r0, r2, #31
 800119e:	d404      	bmi.n	80011aa <_fflush_r+0x32>
 80011a0:	0599      	lsls	r1, r3, #22
 80011a2:	d402      	bmi.n	80011aa <_fflush_r+0x32>
 80011a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80011a6:	f7ff fe6c 	bl	8000e82 <__retarget_lock_acquire_recursive>
 80011aa:	4628      	mov	r0, r5
 80011ac:	4621      	mov	r1, r4
 80011ae:	f7ff ff63 	bl	8001078 <__sflush_r>
 80011b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80011b4:	07da      	lsls	r2, r3, #31
 80011b6:	4605      	mov	r5, r0
 80011b8:	d4e4      	bmi.n	8001184 <_fflush_r+0xc>
 80011ba:	89a3      	ldrh	r3, [r4, #12]
 80011bc:	059b      	lsls	r3, r3, #22
 80011be:	d4e1      	bmi.n	8001184 <_fflush_r+0xc>
 80011c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80011c2:	f7ff fe5f 	bl	8000e84 <__retarget_lock_release_recursive>
 80011c6:	e7dd      	b.n	8001184 <_fflush_r+0xc>

080011c8 <__swhatbuf_r>:
 80011c8:	b570      	push	{r4, r5, r6, lr}
 80011ca:	460c      	mov	r4, r1
 80011cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011d0:	2900      	cmp	r1, #0
 80011d2:	b096      	sub	sp, #88	@ 0x58
 80011d4:	4615      	mov	r5, r2
 80011d6:	461e      	mov	r6, r3
 80011d8:	da0d      	bge.n	80011f6 <__swhatbuf_r+0x2e>
 80011da:	89a3      	ldrh	r3, [r4, #12]
 80011dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80011e0:	f04f 0100 	mov.w	r1, #0
 80011e4:	bf14      	ite	ne
 80011e6:	2340      	movne	r3, #64	@ 0x40
 80011e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80011ec:	2000      	movs	r0, #0
 80011ee:	6031      	str	r1, [r6, #0]
 80011f0:	602b      	str	r3, [r5, #0]
 80011f2:	b016      	add	sp, #88	@ 0x58
 80011f4:	bd70      	pop	{r4, r5, r6, pc}
 80011f6:	466a      	mov	r2, sp
 80011f8:	f000 f848 	bl	800128c <_fstat_r>
 80011fc:	2800      	cmp	r0, #0
 80011fe:	dbec      	blt.n	80011da <__swhatbuf_r+0x12>
 8001200:	9901      	ldr	r1, [sp, #4]
 8001202:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001206:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800120a:	4259      	negs	r1, r3
 800120c:	4159      	adcs	r1, r3
 800120e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001212:	e7eb      	b.n	80011ec <__swhatbuf_r+0x24>

08001214 <__smakebuf_r>:
 8001214:	898b      	ldrh	r3, [r1, #12]
 8001216:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001218:	079d      	lsls	r5, r3, #30
 800121a:	4606      	mov	r6, r0
 800121c:	460c      	mov	r4, r1
 800121e:	d507      	bpl.n	8001230 <__smakebuf_r+0x1c>
 8001220:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001224:	6023      	str	r3, [r4, #0]
 8001226:	6123      	str	r3, [r4, #16]
 8001228:	2301      	movs	r3, #1
 800122a:	6163      	str	r3, [r4, #20]
 800122c:	b003      	add	sp, #12
 800122e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001230:	ab01      	add	r3, sp, #4
 8001232:	466a      	mov	r2, sp
 8001234:	f7ff ffc8 	bl	80011c8 <__swhatbuf_r>
 8001238:	9f00      	ldr	r7, [sp, #0]
 800123a:	4605      	mov	r5, r0
 800123c:	4639      	mov	r1, r7
 800123e:	4630      	mov	r0, r6
 8001240:	f7ff fe8e 	bl	8000f60 <_malloc_r>
 8001244:	b948      	cbnz	r0, 800125a <__smakebuf_r+0x46>
 8001246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800124a:	059a      	lsls	r2, r3, #22
 800124c:	d4ee      	bmi.n	800122c <__smakebuf_r+0x18>
 800124e:	f023 0303 	bic.w	r3, r3, #3
 8001252:	f043 0302 	orr.w	r3, r3, #2
 8001256:	81a3      	strh	r3, [r4, #12]
 8001258:	e7e2      	b.n	8001220 <__smakebuf_r+0xc>
 800125a:	89a3      	ldrh	r3, [r4, #12]
 800125c:	6020      	str	r0, [r4, #0]
 800125e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001262:	81a3      	strh	r3, [r4, #12]
 8001264:	9b01      	ldr	r3, [sp, #4]
 8001266:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800126a:	b15b      	cbz	r3, 8001284 <__smakebuf_r+0x70>
 800126c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001270:	4630      	mov	r0, r6
 8001272:	f000 f81d 	bl	80012b0 <_isatty_r>
 8001276:	b128      	cbz	r0, 8001284 <__smakebuf_r+0x70>
 8001278:	89a3      	ldrh	r3, [r4, #12]
 800127a:	f023 0303 	bic.w	r3, r3, #3
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	81a3      	strh	r3, [r4, #12]
 8001284:	89a3      	ldrh	r3, [r4, #12]
 8001286:	431d      	orrs	r5, r3
 8001288:	81a5      	strh	r5, [r4, #12]
 800128a:	e7cf      	b.n	800122c <__smakebuf_r+0x18>

0800128c <_fstat_r>:
 800128c:	b538      	push	{r3, r4, r5, lr}
 800128e:	4d07      	ldr	r5, [pc, #28]	@ (80012ac <_fstat_r+0x20>)
 8001290:	2300      	movs	r3, #0
 8001292:	4604      	mov	r4, r0
 8001294:	4608      	mov	r0, r1
 8001296:	4611      	mov	r1, r2
 8001298:	602b      	str	r3, [r5, #0]
 800129a:	f7ff fafb 	bl	8000894 <_fstat>
 800129e:	1c43      	adds	r3, r0, #1
 80012a0:	d102      	bne.n	80012a8 <_fstat_r+0x1c>
 80012a2:	682b      	ldr	r3, [r5, #0]
 80012a4:	b103      	cbz	r3, 80012a8 <_fstat_r+0x1c>
 80012a6:	6023      	str	r3, [r4, #0]
 80012a8:	bd38      	pop	{r3, r4, r5, pc}
 80012aa:	bf00      	nop
 80012ac:	20000210 	.word	0x20000210

080012b0 <_isatty_r>:
 80012b0:	b538      	push	{r3, r4, r5, lr}
 80012b2:	4d06      	ldr	r5, [pc, #24]	@ (80012cc <_isatty_r+0x1c>)
 80012b4:	2300      	movs	r3, #0
 80012b6:	4604      	mov	r4, r0
 80012b8:	4608      	mov	r0, r1
 80012ba:	602b      	str	r3, [r5, #0]
 80012bc:	f7ff faf9 	bl	80008b2 <_isatty>
 80012c0:	1c43      	adds	r3, r0, #1
 80012c2:	d102      	bne.n	80012ca <_isatty_r+0x1a>
 80012c4:	682b      	ldr	r3, [r5, #0]
 80012c6:	b103      	cbz	r3, 80012ca <_isatty_r+0x1a>
 80012c8:	6023      	str	r3, [r4, #0]
 80012ca:	bd38      	pop	{r3, r4, r5, pc}
 80012cc:	20000210 	.word	0x20000210

080012d0 <_sbrk_r>:
 80012d0:	b538      	push	{r3, r4, r5, lr}
 80012d2:	4d06      	ldr	r5, [pc, #24]	@ (80012ec <_sbrk_r+0x1c>)
 80012d4:	2300      	movs	r3, #0
 80012d6:	4604      	mov	r4, r0
 80012d8:	4608      	mov	r0, r1
 80012da:	602b      	str	r3, [r5, #0]
 80012dc:	f7ff fb00 	bl	80008e0 <_sbrk>
 80012e0:	1c43      	adds	r3, r0, #1
 80012e2:	d102      	bne.n	80012ea <_sbrk_r+0x1a>
 80012e4:	682b      	ldr	r3, [r5, #0]
 80012e6:	b103      	cbz	r3, 80012ea <_sbrk_r+0x1a>
 80012e8:	6023      	str	r3, [r4, #0]
 80012ea:	bd38      	pop	{r3, r4, r5, pc}
 80012ec:	20000210 	.word	0x20000210

080012f0 <_init>:
 80012f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012f2:	bf00      	nop
 80012f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012f6:	bc08      	pop	{r3}
 80012f8:	469e      	mov	lr, r3
 80012fa:	4770      	bx	lr

080012fc <_fini>:
 80012fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012fe:	bf00      	nop
 8001300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001302:	bc08      	pop	{r3}
 8001304:	469e      	mov	lr, r3
 8001306:	4770      	bx	lr
